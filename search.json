[{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pawelqs.github.io/cevomod/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pawelqs.github.io/cevomod/articles/cevodata_class.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"cevodata class","text":"basic data structure used cevomod cevodata S3 class. designed store data entire cohort samples (SNVs, CNVs, metadata, models) single object. Storing data many samples single object, rather list single-sample objects, makes easier perform studies larger cohorts samples. cevomod internally iterates samples needed, using vectorized R functions possible, much faster classical loop-based approach. visualization methods implemented also cohort-oriented, allowing user easily compare results samples groups samples. data cevodata' object stored tidyverse tibbles. main components thecevodata` object metadata - tibble associates sample IDs patient IDs contains metadata patients (sex, age, molecular subtype tumor) samples (purity estimates), SNVs - stores tibbles SNVs indels. Multiple tibbles can stored alternative lists variants (different variant callers, data filtering settings, etc.), CNVs - stores tibbles CNVs. Multiple tibbles can stored alternative lists variants, models - stores models fitted cevomod, also intermediate results VAF spectra, \\(M(f) ~ 1/f\\) statistics, cumulative tails counts, misc - list tibbles used cevomod store e.g. model residuals.","code":""},{"path":"https://pawelqs.github.io/cevomod/articles/cevodata_class.html","id":"construction","dir":"Articles","previous_headings":"","what":"Construction","title":"cevodata class","text":"user interface cevomod inspired tidyverse R packages ecosystem pipe-oriented. functions accept cevodata first argument return modified cevodata. convention allows building pipelines, e.g., compose cevodata object adding new data components step step. Let’s create example cevodata object. use test_data dataset.","code":"suppressPackageStartupMessages({   library(cevomod)   library(tidyverse) })  theme_set(theme_minimal())"},{"path":"https://pawelqs.github.io/cevomod/articles/cevodata_class.html","id":"snvs","dir":"Articles","previous_headings":"Construction","what":"SNVs","title":"cevodata class","text":"test_data contains SNVs 4 artificial samples. SNVs() function can used get SNVs tibble cevodata object. snvs contains 11 columns describing 16,000 variants 4 samples: Let’s see sequencing depth variants .  Variants lowest sequencing depth least accurate VAF values. One might want filter low-frequency variants reduce noise. Let’s remove variants sequencing depth less 20. Now let’s create cevodata add versions SNV data: can see SNV sets added last one added default one. can changed using default_SNVs() function: way, one can use add_CNV_data() default_CNVs() functions add list(s) CNVs cevodata.","code":"snvs <- SNVs(test_data) glimpse(snvs) #> Rows: 16,000 #> Columns: 11 #> $ sample_id   <chr> \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\"… #> $ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"c… #> $ pos         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,… #> $ gene_symbol <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ alt         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref_reads   <dbl> 25, 22, 21, 34, 62, 4, 33, 31, 25, 41, 42, 64, 32, 29, 42,… #> $ alt_reads   <dbl> 29, 19, 20, 2, 1, 3, 34, 30, 17, 31, 1, 1, 25, 31, 40, 1, … #> $ impact      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ VAF         <dbl> 0.536, 0.462, 0.488, 0.078, 0.030, 0.444, 0.507, 0.483, 0.… #> $ DP          <int> 54, 41, 41, 36, 63, 7, 67, 61, 42, 72, 43, 65, 57, 60, 82,… ggplot(snvs, aes(sample_id, DP, fill = sample_id))+   geom_boxplot() +   scale_y_log10() filtered_snvs <- snvs |>    filter(DP >= 20) cd <- init_cevodata(name = \"Training cevodata\", cancer = \"BRCA\") |>     add_SNV_data(filtered_snvs, name = \"filtered_snvs\") |>      add_SNV_data(snvs, name = \"all_Mutect_snvs\")  cd #> <cevodata> dataset: Training cevodata #> Genome: unknown #> SNV assays: filtered_snvs, all_Mutect_snvs (default) #> CNV assays: None #> 4 samples #> 16000 mutations total, 4000 +/- 0 mutations per sample #> Active models: default_SNVs(cd) <- \"filtered_snvs\" cd #> <cevodata> dataset: Training cevodata #> Genome: unknown #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNV assays: None #> 4 samples #> 15072 mutations total, 3768 +/- 149 mutations per sample #> Active models:"},{"path":"https://pawelqs.github.io/cevomod/articles/cevodata_class.html","id":"metadata","dir":"Articles","previous_headings":"Construction","what":"Metadata","title":"cevodata class","text":"Metadata tibble contains sample IDs now. Lets add information:","code":"cd$metadata #> # A tibble: 4 × 1 #>   sample_id #>   <chr>     #> 1 Sample 1  #> 2 Sample 2  #> 3 Sample 3  #> 4 Sample 4 sample_data <- tibble(   sample_id = c(\"Sample 1\", \"Sample 2\", \"Sample 3\", \"Sample 4\"),   patient_id = c(\"P1\", \"P2\", \"P3\", \"P4\"),   molecular_subtype = c(\"Lumianl A\", \"Luminal B\", \"Luminal A\", \"TNBC\") )  patient_data <- tibble(   patient_id = c(\"P1\", \"P2\", \"P3\", \"P4\"),   sex = c(\"male\", \"male\", \"female\", \"male\") )  cd <- cd |>    add_sample_data(sample_data) |>    add_patient_data(patient_data) cd$metadata #> # A tibble: 4 × 4 #>   sample_id patient_id molecular_subtype sex    #>   <chr>     <chr>      <chr>             <chr>  #> 1 Sample 1  P1         Lumianl A         male   #> 2 Sample 2  P2         Luminal B         male   #> 3 Sample 3  P3         Luminal A         female #> 4 Sample 4  P4         TNBC              male"},{"path":"https://pawelqs.github.io/cevomod/articles/cevodata_class.html","id":"transformations","dir":"Articles","previous_headings":"","what":"Transformations","title":"cevodata class","text":"3 cevodata transforming functions implemented: filter() can used subset cevodata using metadata columns tidyverse manner split_by() split cevodata metadata column merge() merge 2 objects one Transforming functions helpful investigating particular samples, example, one wants see VAF spectrum one sample quickly:","code":"cd |>    filter(sex == \"female\") #> <cevodata> dataset: Training cevodata #> Genome: unknown #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNV assays: None #> 1 cases, 1 samples, 1 sample per case #> NA #> Active models: splits <- cd |>    split_by(\"sex\")  splits #> $male #> <cevodata> dataset: Training cevodata #> Genome: unknown #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNV assays: None #> 3 cases, 3 samples, 1 sample per case #> 11436 mutations total, 3812 +/- 147 mutations per case #> Active models:  #>  #> $female #> <cevodata> dataset: Training cevodata #> Genome: unknown #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNV assays: None #> 1 cases, 1 samples, 1 sample per case #> NA #> Active models:  #>  #> attr(,\"class\") #> [1] \"cevo_splits\" \"list\" merge(splits$male, splits$female) #> Setting active SNVs to filtered_snvs #> Setting active CNVs to #> <cevodata> dataset: Merged datasets #> Genome: unknown #> SNV assays: filtered_snvs (default), all_Mutect_snvs #> CNV assays: None #> 4 cases, 4 samples, 1 sample per case #> 15072 mutations total, 3768 +/- 149 mutations per case #> Active models: cd |>    filter(sample_id == \"Sample 2\") |>    plot_SFS() #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"power-law-models","dir":"Articles","previous_headings":"","what":"Power-law models","title":"Fitting models","text":"","code":"suppressPackageStartupMessages({   library(cevomod)   library(tidyverse) })  cd <- test_data |>    prepare_SNVs() #> 0 variants (0 %), have NA CCF value #> Calculating f intervals, using CCF/2 column #> Calculating SFS statistics cd #> <cevodata> dataset: test_data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: cnvs (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"power-law-components-with-the-exponent-equal-to-2","dir":"Articles","previous_headings":"Power-law models","what":"Power-law components with the exponent equal to 2","title":"Fitting models","text":"assumptions exponential tumor growth, constant mutation rate, absence selectively advantageous micro-clones, exponent power-law component equal 2 (Williams et al. (2016) Durrett (2013)). component described \\[y(f) = \\frac{\\mu}{\\beta n} \\frac{1}{f^2}\\] \\(\\mu/\\beta\\) mutation rate per effective cell division, \\(n\\) number bins spectrum. model can fitted :","code":"cd <- cd |>    fit_powerlaw_tail_fixed(verbose = FALSE) #> Mf_1f's not calculated yet. Calculating with default bins #> Calculating Williams's M(f) ~ 1/f statistics, using CCF/2 column  plot_models(cd) #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"power-law-components-with-the-optimized-exponent","dir":"Articles","previous_headings":"Power-law models","what":"Power-law components with the optimized exponent","title":"Fitting models","text":"assumptions exponential tumor growth /constant mutation rate violated, presence selectively advantageous micro-clones, power-law exponent may deviate 2. component described \\[y(f) = \\frac{\\mu}{\\beta n} \\frac{1}{f^\\alpha}\\] \\(\\mu/\\beta\\) mutation rate per effective cell division, \\(n\\) number bins spectrum, \\(\\alpha\\) constant \\(\\(0, \\infty\\). Sample 2 example sample model assumptions violated. optimized power-law model may used measure sample deviation model assumptions:  Sample 2, power-law exponent equals 4, much higher 3 samples. can indicate example increasing tumor mutation rate.","code":"cd <- cd |>    fit_powerlaw_tail_optim(verbose = FALSE)  plot_models(cd) #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width get_models(cd) |>    select(sample_id, model, component, alpha) #> # A tibble: 4 × 4 #>   sample_id model          component     alpha #>   <chr>     <chr>          <chr>         <dbl> #> 1 Sample 1  powerlaw_optim powerlaw tail  1.88 #> 2 Sample 2  powerlaw_optim powerlaw tail  3.27 #> 3 Sample 3  powerlaw_optim powerlaw tail  2.02 #> 4 Sample 4  powerlaw_optim powerlaw tail  1.86"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"binomial-components","dir":"Articles","previous_headings":"","what":"Binomial components","title":"Fitting models","text":"cevomod, binomial components clonal subclonal variants fitted positive part power-law model residuals. default, fitted using BMix package (Caravagna et al., 2020), although alternative methods available. default method, randomly subsample SNVs Indels spectrum bin number given power-law component residual. , employ BMix fit VAF distribution variants mixture 1 3 binomial distributions (clone plus subclones), accounting variant’s sequencing depth. best model selected based Bayesian Information Criterium (BIC).  subclones fitted power-law component exponent equal 2, evolutionary parameters can estimated using equations Williams et al. (2018). cevomod, use code implemented MOBSTER package calculate parameters. Mutation rates can obtained get_mutation_rates(), selection coefficients get_selection_coefficients() functions. functions can run cevodata objects (correct models fitted), model tibbles directly. allows us manually correct model tibbles calculation evolutionary parameters. example, one can get filter Sample 2 cevodata object:","code":"cd <- fit_subclones(cd) #> Fitting binomial models using BMix #> Warning: replacing previous import 'cli::num_ansi_colors' by #> 'crayon::num_ansi_colors' when loading 'BMix' #> Warning: replacing previous import 'crayon::%+%' by 'ggplot2::%+%' when loading #> 'BMix' #> ✔ Loading BMix, 'Binomial and Beta-Binomial univariate mixtures'. Support : <https://caravagnalab.github.io/BMix/> #> Warning: There was 1 warning in `reframe()`. #> ℹ In argument: `fit_binomial_models_BMix(.data$data, N, pb, verbose)`. #> ℹ In row 1. #> Caused by warning: #> ! replacing previous import 'cli::num_ansi_colors' by 'crayon::num_ansi_colors' when loading 'easypar'  plot_models(cd) #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width cd <- cd |>    filter(sample_id != \"Sample 2\") |>    fit_subclones(powerlaw_model_name = \"powerlaw_fixed\") #> Fitting binomial models using BMix  cd |>    get_models() |>    get_mutation_rates() #> # A tibble: 3 × 2 #>   sample_id mutation_rate_williams #>   <chr>                      <dbl> #> 1 Sample 1                    46.6 #> 2 Sample 3                   104.  #> 3 Sample 4                    78.8  cd |>    get_models() |>    get_selection_coefficients() #> # A tibble: 4 × 8 #>   sample_id mutation_rate_williams component  N_mutations subclone_frequency #>   <chr>                      <dbl> <chr>            <int>              <dbl> #> 1 Sample 3                   104.  Subclone 1         724              0.982 #> 2 Sample 3                   104.  Subclone 2         784              0.234 #> 3 Sample 4                    78.8 Subclone 1         824              0.998 #> 4 Sample 4                    78.8 Subclone 2         366              0.176 #> # ℹ 3 more variables: emergence_time <dbl>, time_end <dbl>, selection <dbl>"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"alternative-methods-for-fitting-clones-and-subclones","dir":"Articles","previous_headings":"Binomial components","what":"Alternative methods for fitting clones and subclones","title":"Fitting models","text":"2 alternative methods fitting clonal subclonal components model. CliP (using fit_subclones(method = \"CliP\") fit_subclomes_clip()) - uses CliP method published (Jiang et al., 2021). Running CliP requires Apptainer installed require installation CliP depenencies. cevomod prepares CliP input files, runs container reads CliP output files back cevomod. container needs build priori build_clip_container(), uses image definition file CliP.def. can done lines code: See fit_subclones() help page details. mclust (using fit_subclones(method = \"mclust\") fit_subclomes_mclust()) - fits power-law component residuals Gaussian mixtures using (mclust) package (Scrucca et al., 2016). faster approximate method recognition clones subclones.","code":"set_containers_dir(\"~/containers/\") # get_containers_dir() to see the current containers dir build_clip_container() fit_subclones(cd, method = \"CliP\")  ## OR the image can be built in the current working directory build_clip_container() fit_subclones(cd, method = \"CliP\")  ## OR in any custom directory build_clip_container(\"/custom/path/\") fit_subclones(cd, method = \"CliP\", clip_sif = \"/custom/path/CliP.sif\")"},{"path":"https://pawelqs.github.io/cevomod/articles/fitting_models.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"Fitting models","text":"Since version 2.2.0 fit_powerlaw_tail_optim() function new bootstraps argument can either FALSE integer number indicating number bootstrap samples. Bootstrapping performed using tidyverse/rsample package requires installed. Bootstrapping significantly extends model fitting time! bootstraps integer greater 1, SNVs default assay split sample_id, resampled N times, new SFS spectra computed, N models fitted sample. resampled models stored <model_name>_bootstraps slot (residuals resample stored misc slot name), summarized model confidence intervals stored model_name slot. demonstration purposes, bootstrap 2 samples 2 resamples. Resampled models can plotted way non-resampled models using plot_models() function.","code":"cd <- cd |>    filter(sample_id %in% cd$metadata$sample_id[1:2]) |>    fit_powerlaw_tail_optim(name = \"bs_model\", bootstraps = 2) #> Splitting SNVs by sample_id #> Resampling SNVs and calculating SFSs #> Fitting models to Sample 1 resamples #> Warning: Recommend at least 1000 non-missing bootstrap resamples for terms: #> `A`, `alpha`. #> Fitting models to Sample 3 resamples #> Warning: Recommend at least 1000 non-missing bootstrap resamples for terms: #> `A`, `alpha`.  get_model_names(cd) #> [1] \"SFS\"                      \"powerlaw_fixed\"           #> [3] \"powerlaw_optim\"           \"powerlaw_optim_subclones\" #> [5] \"powerlaw_fixed_subclones\" \"bs_model_bootstraps\"      #> [7] \"bs_model\" get_models(cd, \"bs_model_bootstraps\") #> # A tibble: 4 × 9 #>   resample_id sample_id model    component       A alpha convergence value best  #>   <chr>       <chr>     <chr>    <chr>       <dbl> <dbl>       <int> <dbl> <lgl> #> 1 Bootstrap1  Sample 1  bs_model powerlaw t…  71.5  1.82           0 1001. TRUE  #> 2 Bootstrap2  Sample 1  bs_model powerlaw t…  58.7  1.89           0  993. TRUE  #> 3 Bootstrap1  Sample 3  bs_model powerlaw t… 120.   1.99           0 1611. TRUE  #> 4 Bootstrap2  Sample 3  bs_model powerlaw t… 109.   2.01           0 1560. TRUE get_models(cd, \"bs_model\") #> # A tibble: 2 × 9 #>   sample_id model  component     A A.lower A.upper alpha alpha.lower alpha.upper #>   <chr>     <chr>  <chr>     <dbl>   <dbl>   <dbl> <dbl>       <dbl>       <dbl> #> 1 Sample 1  bs_mo… powerlaw…  65.1    59.0    71.2  1.85        1.82        1.89 #> 2 Sample 3  bs_mo… powerlaw… 115.    110.    120.   2.00        1.99        2.01"},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"cevodata-s3-class","dir":"Articles","previous_headings":"Data preparation","what":"<cevodata> S3 class","title":"Get Started","text":"cevomod functions use <cevodata> S3 class designed store , data cevomod result. <cevodata> object can easily created using init_cevodata(name) constructor populated data using add_*_data() methods. tutorial use test_data dataset provided cevomod, contains 3 male samples 1 female sample. SNVs tibble contain least sample_id, chrom, pos VAF columns. columns optional. use also sample metadata associates samples patients stores data patients’ sex samples’ purity. cevomod functions pipe-oriented (general), can create populate object small pipeline: name can string informative user. facilitate use cevomod data popular variant callers Mutect2, Strelka2, ASCAT, FACETS, implemented  readthis package. readthis functions designed bulk reading many output variant files (accept path single file, named vector file paths, path directory containing many files). Data objects read readthis functions can added cevodata object single call general add_data() function. information see readthis page.","code":"suppressPackageStartupMessages({   library(cevomod)   library(tidyverse) })  theme_set(theme_minimal()) snvs <- SNVs(test_data) cnvs <- CNVs(test_data) sample_data <- test_data$metadata snvs #> <cevo_snvs> tibble #> # A tibble: 16,000 × 11 #>    sample_id chrom   pos gene_symbol ref   alt   ref_reads alt_reads impact #>  * <chr>     <chr> <int> <chr>       <chr> <chr>     <dbl>     <dbl> <chr>  #>  1 Sample 1  chr1      1 NA          NA    NA           25        29 NA     #>  2 Sample 1  chr1      2 NA          NA    NA           22        19 NA     #>  3 Sample 1  chr1      3 NA          NA    NA           21        20 NA     #>  4 Sample 1  chr1      4 NA          NA    NA           34         2 NA     #>  5 Sample 1  chr1      5 NA          NA    NA           62         1 NA     #>  6 Sample 1  chr1      6 NA          NA    NA            4         3 NA     #>  7 Sample 1  chr1      7 NA          NA    NA           33        34 NA     #>  8 Sample 1  chr1      8 NA          NA    NA           31        30 NA     #>  9 Sample 1  chr1      9 NA          NA    NA           25        17 NA     #> 10 Sample 1  chr1     10 NA          NA    NA           41        31 NA     #> # ℹ 15,990 more rows #> # ℹ 2 more variables: VAF <dbl>, DP <int> sample_data #> # A tibble: 4 × 4 #>   sample_id patient_id sex    purity #>   <chr>     <chr>      <chr>   <dbl> #> 1 Sample 1  Patient 1  male      1   #> 2 Sample 2  Patient 2  male      0.7 #> 3 Sample 3  Patient 3  female    1   #> 4 Sample 4  Patient 4  male      1 cd <- init_cevodata(name = \"Demo data\") |>    add_SNV_data(snvs) |>    add_sample_data(sample_data)  cd #> <cevodata> dataset: Demo data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: None #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"variant-frequency-spectra","dir":"Articles","previous_headings":"Data preparation","what":"Variant Frequency Spectra","title":"Get Started","text":"cevomod fits models distributions variant frequencies sample. Variant Allele Frequency basic measure variant frequency provided next-generation sequencing ’s equal fraction reads supporting alternate allele reads covering mutation site \\[VAF = \\frac{alt\\_reads}{alt\\_reads + ref\\_reads}\\] VAF spectra can plotted using plot_SFS() function (SFS - Site Frequency Spectrum). Like cevomod plotting functions, plot_SFS() returns ggplot object can easily modified. Additional aesthetics can added using aes() can make use columns metadata tibble, left-joined plot data.  can see clear peaks clonal mutations 4 samples. 3 , average frequency clonal variants equals 0.5, corresponding sample purity 1. Sample 2, average frequency clonal mutations lower, line lower purity sample: can also notice small groups mutations VAF close 1.0, likely result looses heterozygocity.","code":"plot_SFS(cd) +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) +   labs(title = \"Variant Allele Frequency Spectra\") #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width cd$metadata |>    select(sample_id, purity) #> # A tibble: 4 × 2 #>   sample_id purity #>   <chr>      <dbl> #> 1 Sample 1     1   #> 2 Sample 2     0.7 #> 3 Sample 3     1   #> 4 Sample 4     1"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"calculation-of-the-cancer-cell-fraction-optional","dir":"Articles","previous_headings":"Data preparation","what":"Calculation of the Cancer Cell Fraction (optional)","title":"Get Started","text":"Although VAF often used model cancer evolution bulk sequencing data, accurate measure true mutation frequency. VAF values affected sample purity copy number alterations, saw VAF spectrum . reliable measurements sample purity copy number values, can take account calculate Cancer Cell Fraction (CCF), fraction cancer cells mutation present. convenient formula calculating CCF published Dentro et al. Principles Reconstructing Subclonal Architecture Cancers (2015). calculate CCF, cevomod requires purity column metadata tibble CNVs tibble following columns: sample_id chrom start end total_cn - containing information total number sequence copies, normal_cn - containing information sequence ploidy normal cells. can add CNV data cevodata object using add_CNV_data() function. Now CCF values can calculated using calc_mutation_frequencies() function: add CCF CCF/2 columns SNVs tibble. cevomod use CCF/2 values default starting now.  new mutation frequency spectra, can see average CCF/2 values clonal peaks now equal 0.5 samples, mutation CCF/2 value close 1.","code":"cnvs #> # A tibble: 8 × 8 #>   sample_id chrom start   end total_cn major_cn minor_cn normal_cn #>   <chr>     <chr> <dbl> <dbl>    <dbl>    <dbl>    <dbl>     <dbl> #> 1 Sample 1  chr1      1  4000        2        1        0         2 #> 2 Sample 1  chr2      1  4000        1        1        0         2 #> 3 Sample 2  chr1      1  4000        2        1        0         2 #> 4 Sample 2  chr2      1  4000        1        1        0         2 #> 5 Sample 3  chr1      1  4000        2        1        0         2 #> 6 Sample 3  chr2      1  4000        1        1        0         2 #> 7 Sample 4  chr1      1  4000        2        1        0         2 #> 8 Sample 4  chr2      1  4000        1        1        0         2 cd <- cd |>    add_CNV_data(cnvs)  cd #> <cevodata> dataset: Demo data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: cnvs (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models: cd <- cd |>    calc_mutation_frequencies() #> 0 variants (0 %), have NA CCF value plot_SFS(cd) +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) #> Calculating SFS statistics #> Calculating f intervals, using CCF/2 column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"intervalization-of-variant-frequencies","dir":"Articles","previous_headings":"Data preparation","what":"Intervalization of variant frequencies","title":"Get Started","text":"fitting models, need binarize mutation frequency values, can using intervalize_mutation_frequencies() function. cevomod use CCF/2 values CCF calculated , VAF CCF column found tibble. intervalize_mutation_frequencies() adds f f_interval column SNVs tibble. default, number bins equal median sequencing coverage variants sample. allows reduce aliasing noise samples low sequencing depth analyze samples higher coverage higher resolution. desired number bins can also specified manually using bins argument. also calculate SFS spectra step, downstream functions . Now ready fit cevomod models.","code":"cd <- cd |>    intervalize_mutation_frequencies() |>   calc_SFS() #> Calculating f intervals, using CCF/2 column #> Calculating SFS statistics  SNVs(cd) |>    glimpse() #> Rows: 16,000 #> Columns: 15 #> $ sample_id   <chr> \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\", \"Sample 1\"… #> $ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"c… #> $ pos         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,… #> $ gene_symbol <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ alt         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ ref_reads   <dbl> 25, 22, 21, 34, 62, 4, 33, 31, 25, 41, 42, 64, 32, 29, 42,… #> $ alt_reads   <dbl> 29, 19, 20, 2, 1, 3, 34, 30, 17, 31, 1, 1, 25, 31, 40, 1, … #> $ impact      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ VAF         <dbl> 0.536, 0.462, 0.488, 0.078, 0.030, 0.444, 0.507, 0.483, 0.… #> $ CCF         <dbl> 1.072, 0.924, 0.976, 0.156, 0.060, 0.888, 1.014, 0.966, 0.… #> $ `CCF/2`     <dbl> 0.536, 0.462, 0.488, 0.078, 0.030, 0.444, 0.507, 0.483, 0.… #> $ f_interval  <chr> \"(0.529,0.549]\", \"(0.451,0.471]\", \"(0.471,0.49]\", \"(0.0588… #> $ f           <dbl> 0.5390, 0.4610, 0.4805, 0.0686, 0.0294, 0.4410, 0.5000, 0.… #> $ DP          <int> 54, 41, 41, 36, 63, 7, 67, 61, 42, 72, 43, 65, 57, 60, 82,…"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model fitting","title":"Get Started","text":"SNVs prepared, models can fitted using fit_*() functions. Full models consist power-law component one binomial components, fitted sequentially. example, first fit power-law model exponent 2, mixture binomial models. default, clonal subclonal components fitted using BMix package (Caravagna et al., 2020). See methods fitting components Fitting models/Binomial components vignette. list fitted models can obtained : last fitted model active one: Models can viewed get_models() function: active model returned argument left empty: tibble lists components models samples. Binomial components called either clones subclones. component highest cellular frequency called clone, remaining components called subclones. distinction important estimating subclonal evolutionary parameters: main clones positive selection tumor, estimate evolutionary parameters subclones.","code":"cd <- cd |>    fit_powerlaw_tail_fixed() |>    fit_subclones() #> Fitting binomial models using BMix #> Warning: replacing previous import 'cli::num_ansi_colors' by #> 'crayon::num_ansi_colors' when loading 'BMix' #> Warning: replacing previous import 'crayon::%+%' by 'ggplot2::%+%' when loading #> 'BMix' #> ✔ Loading BMix, 'Binomial and Beta-Binomial univariate mixtures'. Support : <https://caravagnalab.github.io/BMix/> #> Fitting williams neutral models... #> Mf_1f's not calculated yet. Calculating with default bins #> Calculating Williams's M(f) ~ 1/f statistics, using CCF/2 column #> Warning: There was 1 warning in `reframe()`. #> ℹ In argument: `fit_binomial_models_BMix(.data$data, N, pb, verbose)`. #> ℹ In row 1. #> Caused by warning: #> ! replacing previous import 'cli::num_ansi_colors' by 'crayon::num_ansi_colors' when loading 'easypar' cd #> <cevodata> dataset: Demo data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: cnvs (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models: powerlaw_fixed_subclones get_model_names(cd) #> [1] \"SFS\"                      \"powerlaw_fixed\"           #> [3] \"powerlaw_fixed_subclones\" active_models(cd) #> [1] \"powerlaw_fixed_subclones\" get_models(cd, which = \"powerlaw_fixed\") #> # A tibble: 4 × 11 #>   sample_id model  component  from    to length     A     b alpha rsquared best  #>   <chr>     <chr>  <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>    <dbl> <lgl> #> 1 Sample 1  power… Neutral … 0.045 0.095 0.05    46.6 2339.     2    1.00  TRUE  #> 2 Sample 2  power… Neutral … 0.245 0.295 0.05    15.1  360.     2    0.989 TRUE  #> 3 Sample 3  power… Neutral … 0.285 0.335 0.0500 104.   609.     2    0.986 TRUE  #> 4 Sample 4  power… Neutral … 0.245 0.295 0.0500  78.8  747.     2    0.996 TRUE get_models(cd) #> # A tibble: 13 × 16 #>    sample_id model    component   from     to  length     A     b alpha rsquared #>    <chr>     <chr>    <chr>      <dbl>  <dbl>   <dbl> <dbl> <dbl> <dbl>    <dbl> #>  1 Sample 1  binomia… Clone     NA     NA     NA       NA     NA     NA   NA     #>  2 Sample 1  powerla… Neutral …  0.045  0.095  0.05    46.6 2339.     2    1.00  #>  3 Sample 2  binomia… Clone     NA     NA     NA       NA     NA     NA   NA     #>  4 Sample 2  binomia… Subclone… NA     NA     NA       NA     NA     NA   NA     #>  5 Sample 2  powerla… Neutral …  0.245  0.295  0.05    15.1  360.     2    0.989 #>  6 Sample 3  binomia… Clone     NA     NA     NA       NA     NA     NA   NA     #>  7 Sample 3  binomia… Subclone… NA     NA     NA       NA     NA     NA   NA     #>  8 Sample 3  binomia… Subclone… NA     NA     NA       NA     NA     NA   NA     #>  9 Sample 3  powerla… Neutral …  0.285  0.335  0.0500 104.   609.     2    0.986 #> 10 Sample 4  binomia… Clone     NA     NA     NA       NA     NA     NA   NA     #> 11 Sample 4  binomia… Subclone… NA     NA     NA       NA     NA     NA   NA     #> 12 Sample 4  binomia… Subclone… NA     NA     NA       NA     NA     NA   NA     #> 13 Sample 4  powerla… Neutral …  0.245  0.295  0.0500  78.8  747.     2    0.996 #> # ℹ 6 more variables: best <lgl>, N <int>, cellularity <dbl>, #> #   N_mutations <int>, BIC <dbl>, sequencing_DP <dbl>"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"plot-models","dir":"Articles","previous_headings":"","what":"Plot models","title":"Get Started","text":"fitted models can visualized plot_models() function:  model fitted sample 2 inaccurate. slope distribution steep approximated power-law exponent 2. sample fitted model fixed power-law component. ignore fit estimating evolutionary parameters.","code":"plot_models(cd) +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) +   labs(title = \"cevomod models\") #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevomod/articles/get_started.html","id":"evolutionary-parameters","dir":"Articles","previous_headings":"","what":"Evolutionary parameters","title":"Get Started","text":"evolutionary parameters subclones can calculated using equations provided Williams et al. (2018). Williams assumes exponential tumor growth constant mutation rate, power-law exponent equals 2, can use equations models fitted. cevomod, use code functions implemented MOBSTER package calculate parameters. use model Sample 2, though. mutation rate severely underestimated, model fit inaccurate. One evaluate fitted models carefully, continuing analysis. Mutation rates can obtained get_mutation_rates(), selection coefficients get_selection_coefficients() functions. functions can run cevodata objects (correct models fitted), model tibbles directly. allows us manually correct model tibbles calculation evolutionary parameters. example, one can get filter Sample 2 cevodata object: models tibble:","code":"cd |>    filter(sample_id != \"Sample 2\") |>    get_models() |>    get_mutation_rates() #> # A tibble: 3 × 2 #>   sample_id mutation_rate_williams #>   <chr>                      <dbl> #> 1 Sample 1                    46.6 #> 2 Sample 3                   104.  #> 3 Sample 4                    78.8 cd |>    get_models() |>    filter(sample_id != \"Sample 2\") |>    get_selection_coefficients() #> # A tibble: 4 × 8 #>   sample_id mutation_rate_williams component  N_mutations subclone_frequency #>   <chr>                      <dbl> <chr>            <int>              <dbl> #> 1 Sample 3                   104.  Subclone 1         725              0.982 #> 2 Sample 3                   104.  Subclone 2         784              0.234 #> 3 Sample 4                    78.8 Subclone 1         826              1.00  #> 4 Sample 4                    78.8 Subclone 2         365              0.182 #> # ℹ 3 more variables: emergence_time <dbl>, time_end <dbl>, selection <dbl>"},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"sequencing-depth","dir":"Articles","previous_headings":"Data overview","what":"Sequencing depth","title":"Visualizations","text":"","code":"plot_sequencing_depth(cd)"},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"vaf-spectra","dir":"Articles","previous_headings":"VAF distributions","what":"VAF spectra","title":"Visualizations","text":"VAF spectrum histogram Variant Allele Frequencies, straightforward representation VAF distribution. base plot cevomod model representations.","code":"plot_SFS(cd) +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) +   labs(title = \"Variant Allele Frequency Spectrum\") #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width plot_SFS(cd, geom = \"line\") +   aes(color = sample_id) +   labs(title = \"Variant Allele Frequency Spectrum\") +   theme_minimal() #> Calculating SFS statistics #> Calculating f intervals, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"cumulative-tails","dir":"Articles","previous_headings":"VAF distributions","what":"Cumulative tails","title":"Visualizations","text":"Cumulative tails show number mutations frequency higher f (x-axis). uses log-log scale default, power-law tail \\(\\alpha\\) equal 2 straight line.","code":"plot_cumulative_tails(cd, size = 0.5, scale_y = FALSE) #> Calculating cumulative tails, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"mf-1f","dir":"Articles","previous_headings":"VAF distributions","what":"M(f) ~ 1/f","title":"Visualizations","text":"\\[M(f) \\sim \\frac{1}{f}\\] statistic described Williams et al. (2016). representation, power-law tail \\(\\alpha\\) equal 2 straight line.","code":"plot_Mf_1f(cd) #> Mf_1f's not calculated yet. Calculating with default bins #> Calculating Williams's M(f) ~ 1/f statistics, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"mutations","dir":"Articles","previous_headings":"","what":"Mutations","title":"Visualizations","text":"Drier mutations can easily annotated VAF plots using layer_mutations() function. default, mutations HIGH MODERATE impact annotated, custom filtering function can applied filter argument.  Also, custom list genes can provided genes argument:","code":"plot_SFS(cd) +   layer_mutations(cd, mapping = aes(x = VAF), drivers = \"BRCA\") #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width #> Warning in ggrepel::geom_label_repel(mapping = join_aes(default_mapping, : #> Ignoring unknown aesthetics: shape plot_SFS(cd) +   layer_mutations(cd, mapping = aes(x = VAF), genes = c(\"TP53\", \"BRCA1\")) #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width #> Warning in ggrepel::geom_label_repel(mapping = join_aes(default_mapping, : #> Ignoring unknown aesthetics: shape"},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"mutation-plots","dir":"Articles","previous_headings":"Mutations","what":"Mutation plots","title":"Visualizations","text":"Mutations many genes interest can plotted plot_mutations():","code":"plot_mutations(cd, drivers = \"BRCA\")"},{"path":"https://pawelqs.github.io/cevomod/articles/visualizations.html","id":"models","dir":"Articles","previous_headings":"","what":"Models","title":"Visualizations","text":"Active models can plotted plot_models()  plots can ealisy customized:  model components can shown hidden show_ arguments","code":"test_data_fitted |>    plot_models() #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width test_data_fitted |>    plot_models() +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) +   labs(title = \"Models\") #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width test_data_fitted |>    plot_models(show_subclones = FALSE) +   aes(fill = sex) +   scale_fill_manual(values = c(male = \"#DD4124\", female = \"#00496F\")) +   labs(title = \"Models\") #> Warning in geom_bar(join_aes(bar_mapping, mapping), stat = \"identity\", alpha = #> alpha, : Ignoring unknown aesthetics: width"},{"path":"https://pawelqs.github.io/cevomod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paweł Kuś. Author, maintainer.","code":""},{"path":"https://pawelqs.github.io/cevomod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuś P (2023). cevomod: Cancer Evolution Models. https://pawelqs.github.io/cevomod/, https://github.com/pawelqs/cevomod.","code":"@Manual{,   title = {cevomod: Cancer Evolution Models},   author = {Paweł Kuś},   year = {2023},   note = {https://pawelqs.github.io/cevomod/, https://github.com/pawelqs/cevomod}, }"},{"path":"https://pawelqs.github.io/cevomod/index.html","id":"cevomod-","dir":"","previous_headings":"","what":"Cancer Evolution Models","title":"Cancer Evolution Models","text":"cevomod package implements methods analyzing cancer evolution Next Generation Sequencing data. modeling approach implemented cevomod inspired MOBSTER package (Caravagna et al., 2020), models distribution Variant Allele Frequencies sample mixture power-law-shaped binomial distributions. However, MOBSTER fails recognize power-law component (-called neutral tail) Whole Exome Sequencing data data insufficient sequencing coverage. cevomod implements methods can fit model data significant loss neutral tail variants.  cevomod, power-law binomial components model fitted sequentially. power-law components fitted first, binomial components fitted residuals power-law components. two types power-law models: power-law exponents equal 2, expected exponentially growing populations according (Durrett, 2013) (Williams et al., 2016), power-law exponent best fits data. also several methods fitting clonal subclonal components: using Gaussian mixtures (mclust) (Scrucca et al., 2016), using binomial distributions (BMix) (Caravagna et al., 2020), penalizing pairwise differences (CliP) (Jiang et al., 2021). See model fitting details Get Started Fitting models vignettes.","code":""},{"path":"https://pawelqs.github.io/cevomod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cancer Evolution Models","text":"can install development version cevomod GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"pawelqs/cevomod\")"},{"path":"https://pawelqs.github.io/cevomod/index.html","id":"last-changes","dir":"","previous_headings":"","what":"Last changes","title":"Cancer Evolution Models","text":"v2.3.0 - subclones can fitted using CliP (Jiang et al., 2021) (fit_subclones(method = \"CliP\")). option requires Apptainer installed. CliP container image can build build_clip_container() v2.2.0 - fit_powerlaw_tail_fixed() bootstrap option. See details Fitting models #Bootstrapping vignette v2.1.0 - cevomod integrated helper readthis package, designed bulk reading variant files algorithms Mutect2, Strelka, ASCAT, FACETS, cevomod-friendly data format. Objects returned readthis::read_*() functions can added cevodata object using general add_data() function. v2.0.0 - Starting version 2.0.0, cevomod can use either VAF CCF (Cancer Cell Fraction) measure mutation frequency. CCF measure mutation frequency corrected tumor purity copy number alterations. CCF can calculated prior mutation frequency intervalization using calc_mutation_frequencies() function requires information total copy number tumor normal tissue sample purity (tumor cell content). See Vignettes examples. see previous changes package see Changelog","code":""},{"path":"https://pawelqs.github.io/cevomod/index.html","id":"help-and-support","dir":"","previous_headings":"","what":"Help and support","title":"Cancer Evolution Models","text":"GitHub Issues","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/ITH.html","id":null,"dir":"Reference","previous_headings":"","what":"Intratumor heterogeneity — ITH","title":"Intratumor heterogeneity — ITH","text":"Intratumor heterogeneity","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/ITH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intratumor heterogeneity — ITH","text":"","code":"plot_ITH(object, ...)  # S3 method for cevodata plot_ITH(object, ...)  # S3 method for cevo_ITH_tbl plot(x, ...)  estimate_ITH(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/ITH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intratumor heterogeneity — ITH","text":"object object ... used x ITH tibble plot","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":null,"dir":"Reference","previous_headings":"","what":"William's M(f) ~ 1/f statistics — Mf_1f","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"Mf_1f columns description: sample_id f n - number mutations VAF interval M(f) 1/f columns plot William's statistics","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"","code":"calc_Mf_1f(object, ...)  # S3 method for cevodata calc_Mf_1f(   object,   which_snvs = default_SNVs(object),   column = get_frequency_measure_name(object, which_snvs),   bins = 100,   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_snvs calc_Mf_1f(   object,   column = get_frequency_measure_name(object),   bins = 100,   verbose = get_cevomod_verbosity(),   ... )  plot_Mf_1f(object, ...)  # S3 method for cevodata plot_Mf_1f(   object,   bins = NULL,   from = 0.1,   to = 0.25,   scale = TRUE,   geom = \"point\",   ... )  get_Mf_1f(object, model_name = \"Mf_1f\", verbose = TRUE, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"object SNVs tibble object ... arguments which_snvs SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose Verbose? min f plot max f plot scale scale data? geom ggplot geom use, eg. geom_line() model_name name slot Mf_1f statistics","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"calc_Mf_1f(): Calculate Williams M(f) ~ 1/f saves cevodata$models$Mf_1f calc_Mf_1f(cevodata): Method  object calc_Mf_1f(cevo_snvs): Method <cevo_snvs> object plot_Mf_1f(cevodata): Plot M(f) ~ 1/f get_Mf_1f(): Get Mf_1f","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/Mf_1f.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"William's M(f) ~ 1/f statistics — Mf_1f","text":"","code":"data(\"test_data\") test_data |>   calc_Mf_1f() #> Calculating Williams's M(f) ~ 1/f statistics, using VAF column #> <cevodata> dataset: test_data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: cnvs (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:   test_data |>   plot_Mf_1f() #> Mf_1f's not calculated yet. Calculating with default bins #> Calculating Williams's M(f) ~ 1/f statistics, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/reference/SNVs_CNVs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNVs with merged CNVs — SNVs_CNVs","title":"Get SNVs with merged CNVs — SNVs_CNVs","text":"Get SNVs merged CNVs","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/SNVs_CNVs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNVs with merged CNVs — SNVs_CNVs","text":"","code":"SNVs_CNVs(object)"},{"path":"https://pawelqs.github.io/cevomod/reference/SNVs_CNVs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNVs with merged CNVs — SNVs_CNVs","text":"object cevodata object SNVs CNVs","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/active_assays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set active assays of the cevodata object — active_assays","title":"Get/Set active assays of the cevodata object — active_assays","text":"Get/Set active assays cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/active_assays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set active assays of the cevodata object — active_assays","text":"","code":"default_SNVs(object, ...)  # S3 method for cevodata default_SNVs(object, ...)  default_SNVs(object, ...) <- value  # S3 method for cevodata default_SNVs(object, ...) <- value  default_CNVs(object, ...)  # S3 method for cevodata default_CNVs(object, ...)  default_CNVs(object, ...) <- value  # S3 method for cevodata default_CNVs(object, ...) <- value"},{"path":"https://pawelqs.github.io/cevomod/reference/active_assays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set active assays of the cevodata object — active_assays","text":"object object ... arguments value name new default assay","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/active_assays.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get/Set active assays of the cevodata object — active_assays","text":"default_SNVs(cevodata): Get default SNVs assay cevodata default_SNVs(cevodata) <- value: Set default SNVs assay cevodata default_CNVs(cevodata): Get default CNVs assay cevodata default_CNVs(cevodata) <- value: Set default CNVs assay cevodata","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/active_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the active models — active_models","title":"Get the name of the active models — active_models","text":"Get name active models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/active_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the active models — active_models","text":"","code":"active_models(object)"},{"path":"https://pawelqs.github.io/cevomod/reference/active_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the active models — active_models","text":"object cebodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_mutation_contexts.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate mutation context and types for mutation signatures analysis — annotate_mutation_contexts","title":"Annotate mutation context and types for mutation signatures analysis — annotate_mutation_contexts","text":"Annotate mutation context types mutation signatures analysis","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_mutation_contexts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate mutation context and types for mutation signatures analysis — annotate_mutation_contexts","text":"","code":"annotate_mutation_contexts(snvs, bsgenome)"},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_mutation_contexts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate mutation context and types for mutation signatures analysis — annotate_mutation_contexts","text":"snvs snvs tbl bsgenome BSGenome object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_normal_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate chromosome ploidies in CNV data — annotate_normal_cn","title":"Annotate chromosome ploidies in CNV data — annotate_normal_cn","text":"Adds normal_cn column data. column required e.g. Dentro CCF calculation method. Requires 'sex' column metadata. Males encoded 'M' \"male'.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_normal_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate chromosome ploidies in CNV data — annotate_normal_cn","text":"","code":"annotate_normal_cn(object, which_cnvs = default_CNVs(object))"},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_normal_cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate chromosome ploidies in CNV data — annotate_normal_cn","text":"object object which_cnvs Name CNVs slot","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/annotate_normal_cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate chromosome ploidies in CNV data — annotate_normal_cn","text":"object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/as_cevo_snvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cevo_snvs tibble — as_cevo_snvs","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"Create cevo_snvs tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/as_cevo_snvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"","code":"as_cevo_snvs(snvs)"},{"path":"https://pawelqs.github.io/cevomod/reference/as_cevo_snvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cevo_snvs tibble — as_cevo_snvs","text":"snvs tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/assays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Add SNV/CNV data from the cevodata dataset — assays","title":"Get/Add SNV/CNV data from the cevodata dataset — assays","text":"Get/Add SNV/CNV data cevodata dataset","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/assays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Add SNV/CNV data from the cevodata dataset — assays","text":"","code":"add_SNV_data(object, ...)  # S3 method for cevodata add_SNV_data(object, snvs, name = NULL, ...)  add_CNV_data(object, ...)  # S3 method for cevodata add_CNV_data(object, cnvs, name = NULL, ...)  SNVs(object, ...)  # S3 method for cevodata SNVs(object, which = object$active_SNVs, ...)  get_SNVs_wider(object, fill_na = NULL)  CNVs(object, ...)  # S3 method for cevodata CNVs(object, which = object$active_CNVs, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/assays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Add SNV/CNV data from the cevodata dataset — assays","text":"object cevodata object ... arguments snvs tibble SNVs name name SNVs/CNVs assay cnvs tibble CNVs assay use - uses active_SNVs nonei fill_na fill missing value","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/assays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Add SNV/CNV data from the cevodata dataset — assays","text":"tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/assays.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get/Add SNV/CNV data from the cevodata dataset — assays","text":"add_SNV_data(cevodata): Add new SNVs cevodata add_CNV_data(cevodata): Add new CNVs cevodata SNVs(cevodata): Get SNVs cevodata dataset get_SNVs_wider(): Get SNVs wide table form CNVs(cevodata): Get CNVs cevodata dataset","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/build_clip_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the CliP Apptainer container — build_clip_container","title":"Build the CliP Apptainer container — build_clip_container","text":"CliP.sif saved out_dir, provided out_dir NULL containers_dir set using set_containers_dir(), image saved set containers_dir. out_dir NULL  containers_dir set, image saved current working dir.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/build_clip_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the CliP Apptainer container — build_clip_container","text":"","code":"build_clip_container(out_dir = NULL, force = FALSE)"},{"path":"https://pawelqs.github.io/cevomod/reference/build_clip_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the CliP Apptainer container — build_clip_container","text":"out_dir Path force Force build image exists","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/calc_mutation_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calc mutation frequencies — calc_mutation_frequencies","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"Calculates CNV-corrected mutation frequencies. Implemented methods: Dentro - calculates Cancer Cell Fraction (CCF) using formulas Dentro et al. Principles Reconstructing Subclonal Architecture Cancers (2015)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/calc_mutation_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"","code":"calc_mutation_frequencies(   object,   method = \"Dentro\",   which_snvs = default_SNVs(object),   which_cnvs = default_CNVs(object),   rm_intermediate_cols = TRUE,   verbose = get_cevomod_verbosity() )  dentro_2015_correction(tbl)"},{"path":"https://pawelqs.github.io/cevomod/reference/calc_mutation_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"object object method Available methods: Dentro which_snvs SNVs use which_cnvs CNVs use rm_intermediate_cols columns used get CCF removed? verbose Verbose? tbl tibble contains columns: VAF, total_cn, normal_cn, purity","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/calc_mutation_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"object tibble new columns: u, m, CCF (Cancer Cell Fraction)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/calc_mutation_frequencies.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calc mutation frequencies — calc_mutation_frequencies","text":"dentro_2015_correction(): Implements CNV-based frequency correction method described Dentro et al. 'Principles Reconstructing Subclonal Architecture Cancers' (2015)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cevo_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata to the cevodata object — cevo_metadata","title":"Add metadata to the cevodata object — cevo_metadata","text":"Add metadata cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cevo_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata to the cevodata object — cevo_metadata","text":"","code":"add_patient_data(object, ...)  # S3 method for cevodata add_patient_data(object, data, ...)  add_sample_data(object, ...)  # S3 method for cevodata add_sample_data(object, data, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/cevo_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add metadata to the cevodata object — cevo_metadata","text":"object object ... arguments data name new default assay","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cevo_metadata.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add metadata to the cevodata object — cevo_metadata","text":"add_patient_data(cevodata): Add patient data cevodata object add_sample_data(cevodata): Add samples' data cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cevomod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cevomod: Cancer Evolution Models — cevomod-package","title":"cevomod: Cancer Evolution Models — cevomod-package","text":"Cancer Evolutionary Models. Set methods facilitating analysis Cancer Evolution. Developped PhD.","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/reference/cevomod-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cevomod: Cancer Evolution Models — cevomod-package","text":"Maintainer: Paweł Kuś kpawel2210@gmail.com (ORCID)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cnv_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CNV heatmap — cnv_plots","title":"Plot CNV heatmap — cnv_plots","text":"Plot CNV heatmap","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cnv_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CNV heatmap — cnv_plots","text":"","code":"plot_CNV_heatmap(object, ...)  # S3 method for cevodata plot_CNV_heatmap(object, meta_field, ...)  heatmap_granges(   granges,   meta_field,   row_groups = NULL,   keep_sites_present_in = floor(0.8 * length(granges)),   color_breaks = c(0, 2, 6),   colors = c(\"dodgerblue3\", \"white\", \"firebrick3\"),   window_width = 1e+06,   upper_limit = 6,   cluster_rows = FALSE,   show_row_names = TRUE,   show_column_names = FALSE,   use_raster = TRUE,   cluster_columns = FALSE,   border = TRUE,   legend_params = NULL,   verbose = TRUE,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/cnv_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CNV heatmap — cnv_plots","text":"object cevodata ... arguments passed Heatmap meta_field column plot granges granges list row_groups vector keep_sites_present_in floor(0.8*length(granges)) color_breaks c(0, 2, 6) colors c(\"dodgerblue3\", \"white\", \"firebrick3\") window_width window_width upper_limit upper limit color scale cluster_rows FALSE show_row_names TRUE show_column_names FALSE use_raster TRUE cluster_columns FALSE border TRUE legend_params goes Heatmap(heatmap_legend_param = .) verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cnv_plots.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot CNV heatmap — cnv_plots","text":"plot_CNV_heatmap(cevodata): Plot CNVs heatmap_granges(): Plot Granges list","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Some colors — colors","title":"Some colors — colors","text":"colors","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some colors — colors","text":"","code":"colors"},{"path":"https://pawelqs.github.io/cevomod/reference/colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Some colors — colors","text":"object class cevo_colors (inherits list) length 2.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/compare_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare fits from many models — compare_models","title":"Compare fits from many models — compare_models","text":"Compare fits many models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/compare_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare fits from many models — compare_models","text":"","code":"compare_models(   object,   model_names,   column_name,   linetype = \"solid\",   linewidth = 1,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/compare_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare fits from many models — compare_models","text":"object cevodata object model_names models compare column_name residuals_* column plot linetype solid linewidth 1 ... arguments passed plot_SFS()","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutation_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get matrix of per sample mutation types for mutation signatures analysis — count_mutation_types","title":"Get matrix of per sample mutation types for mutation signatures analysis — count_mutation_types","text":"Get matrix per sample mutation types mutation signatures analysis","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutation_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get matrix of per sample mutation types for mutation signatures analysis — count_mutation_types","text":"","code":"count_mutation_types(snvs)"},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutation_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get matrix of per sample mutation types for mutation signatures analysis — count_mutation_types","text":"snvs annotated snvs tbl","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutation_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get matrix of per sample mutation types for mutation signatures analysis — count_mutation_types","text":"wide tbl","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutations_by_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Get numbers of neutral, clonal, subclonal ect variants — count_mutations_by_component","title":"Get numbers of neutral, clonal, subclonal ect variants — count_mutations_by_component","text":"Get numbers neutral, clonal, subclonal ect variants","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutations_by_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get numbers of neutral, clonal, subclonal ect variants — count_mutations_by_component","text":"","code":"count_mutations_by_component(   object,   models_name = active_models(object),   include_filtered = FALSE )  count_neutral_tail_mutations(object, models_name = active_models(object))  count_neutral_tail_filtered_mutations(   object,   models_name = active_models(object) )"},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutations_by_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get numbers of neutral, clonal, subclonal ect variants — count_mutations_by_component","text":"object cevodata object models_name models name include_filtered include component filtered mutations","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/count_mutations_by_component.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get numbers of neutral, clonal, subclonal ect variants — count_mutations_by_component","text":"count_neutral_tail_mutations(): Count neutral tail mutations count_neutral_tail_filtered_mutations(): Count filtered mutations VAF higher 0.01","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative tails — cumulative_tails","title":"Cumulative tails — cumulative_tails","text":"cumulative_tails columns: f n column number mutations f interval y cumulative tail value y_scaled y values scaled range 0-1","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative tails — cumulative_tails","text":"","code":"calc_cumulative_tails(object, ...)  # S3 method for cevodata calc_cumulative_tails(   object,   which_snvs = default_SNVs(object),   column = get_frequency_measure_name(object, which_snvs),   bins = 100,   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_snvs calc_cumulative_tails(   object,   column = get_frequency_measure_name(object),   bins = 100,   verbose = get_cevomod_verbosity(),   ... )  plot_cumulative_tails(object, ...)  # S3 method for cevodata plot_cumulative_tails(object, scale_y = TRUE, scales = \"loglog\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative tails — cumulative_tails","text":"object SNVs tibble object ... passed geom_line() which_snvs SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose Verbose? scale_y scale y vaules 1? scales loglog/semilog","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative tails — cumulative_tails","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cumulative tails — cumulative_tails","text":"calc_cumulative_tails(cevodata): Calculate cumulative tails saves cevodata$models$cumulative_tails tibble calc_cumulative_tails(cevo_snvs): Calculate cumulative tails plot_cumulative_tails(cevodata): Shortcut plot cum tails SNVs dataframe","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cumulative_tails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative tails — cumulative_tails","text":"","code":"data(\"test_data\") test_data |>   calc_cumulative_tails() #> Calculating cumulative tails, using VAF column #> <cevodata> dataset: test_data #> Genome: unknown #> SNV assays: snvs (default) #> CNV assays: cnvs (default) #> 4 cases, 4 samples, 1 sample per case #> 16000 mutations total, 4000 +/- 0 mutations per case #> Active models:   test_data |>   plot_cumulative_tails() #> Calculating cumulative tails, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/reference/cut_f_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mutation frequency intervals — cut_f_intervals","title":"Get mutation frequency intervals — cut_f_intervals","text":"Cuts requested column e.g. CCF VAF intervals. Adds f_interval f columns input SNVs tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cut_f_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mutation frequency intervals — cut_f_intervals","text":"","code":"cut_f_intervals(snvs, column, bins = NULL)"},{"path":"https://pawelqs.github.io/cevomod/reference/cut_f_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mutation frequency intervals — cut_f_intervals","text":"snvs SNVs tibble column Name column frequencies, eg. VAF CCF bins Number bins","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/cut_f_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mutation frequency intervals — cut_f_intervals","text":"Tibble f_interval f columns","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/driver_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Tbl of driver genes from Bailey, Ding et al. 'Comprehensive Characterization\nof Cancer Driver Genes and Mutations', Cell, 2-18\nhttps://doi.org/10.1016/j.cell.2018.02.060 — driver_genes","title":"Tbl of driver genes from Bailey, Ding et al. 'Comprehensive Characterization\nof Cancer Driver Genes and Mutations', Cell, 2-18\nhttps://doi.org/10.1016/j.cell.2018.02.060 — driver_genes","text":"Tbl driver genes Bailey, Ding et al. 'Comprehensive Characterization Cancer Driver Genes Mutations', Cell, 2-18 https://doi.org/10.1016/j.cell.2018.02.060","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/evaluate_MC_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Monte Carlo results — evaluate_MC_runs","title":"Evaluate Monte Carlo results — evaluate_MC_runs","text":"Evaluate Monte Carlo results","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/evaluate_MC_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Monte Carlo results — evaluate_MC_runs","text":"","code":"evaluate_MC_runs(mc_arr, rowsums_pred, colsums_pred)"},{"path":"https://pawelqs.github.io/cevomod/reference/evaluate_MC_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Monte Carlo results — evaluate_MC_runs","text":"mc_arr Monte Carlo simutations array rowsums_pred expected row sums colsums_pred predicted col sums","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/evo_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get evolutionary parameters from the model — evo_params","title":"Get evolutionary parameters from the model — evo_params","text":"Code functions re-formatted code MOBSTER R package Caravagna, Williams et al. https://github.com/caravagnalab/mobster","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/evo_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get evolutionary parameters from the model — evo_params","text":"","code":"get_mutation_rates(object, ...)  # S3 method for cevodata get_mutation_rates(object, models_name = \"powerlaw_fixed\", ...)  # S3 method for tbl_df get_mutation_rates(object, ...)  get_selection_coefficients(object, ...)  # S3 method for cevodata get_selection_coefficients(   object,   models_name = \"powerlaw_fixed_subclones\",   Nmax = 10^10,   ... )  # S3 method for tbl_df get_selection_coefficients(object, Nmax = 10^10, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/evo_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get evolutionary parameters from the model — evo_params","text":"object cevodata object models tibble ... arguments models_name models_name Nmax Time tumour sampled (tumour doublings)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/evo_params.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get evolutionary parameters from the model — evo_params","text":"get_mutation_rates(): Get mutation rates Williams Use ... get_mutation_rates(cevodata): Get mutation rates Williams get_mutation_rates(tbl_df): Get mutation rates Williams get_selection_coefficients(): Get subclonal selection coefficients Williams Use properties subclone fit calculate selection intensity, selection defined relative growth rates host tumour cell populations (\\(\\lambda h\\)) vs subclone (\\(\\lambda s\\)): $$1+s=\\lambda h / \\lambda s$$ get_selection_coefficients(cevodata): Get subclonal selection coefficients Williams get_selection_coefficients(tbl_df): Get subclonal selection coefficients Williams","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fill_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill na values in the object — fill_na","title":"Fill na values in the object — fill_na","text":"Fill na values object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fill_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill na values in the object — fill_na","text":"","code":"fill_na(object, val)"},{"path":"https://pawelqs.github.io/cevomod/reference/fill_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill na values in the object — fill_na","text":"object object val value fill NAs","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/filter.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter/subset cevodata object — filter.cevodata","title":"Filter/subset cevodata object — filter.cevodata","text":"wrapper around dplyr::filter function can used subset cevodata object. Works like dplyr::filter, performs filtering metadata, filters SNVs, CNVs, clones models keeping samples kept metadata","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/filter.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter/subset cevodata object — filter.cevodata","text":"","code":"# S3 method for cevodata filter(.data, ..., .preserve = FALSE)"},{"path":"https://pawelqs.github.io/cevomod/reference/filter.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter/subset cevodata object — filter.cevodata","text":".data cevodata object ... expression passed dplyr::filter(...) .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/filter.cevodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter/subset cevodata object — filter.cevodata","text":"cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/filter_SNVs_by_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"Filter SNVs position: using regions tbl bed file","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/filter_SNVs_by_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"","code":"filter_SNVs_by_regions(snvs, regions = NULL, bed_file = NULL)"},{"path":"https://pawelqs.github.io/cevomod/reference/filter_SNVs_by_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter SNVs by position: using regions tbl or bed file — filter_SNVs_by_regions","text":"snvs snvs tbl columns: sample_id, chrom, pos regions regions tbl columns chrom, start, end bed_file bed file","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_mobster.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Mobster models — fit_mobster","title":"Fit Mobster models — fit_mobster","text":"Fit Mobster models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_mobster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Mobster models — fit_mobster","text":"","code":"fit_mobster(object, ...)  # S3 method for cevodata fit_mobster(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/fit_mobster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Mobster models — fit_mobster","text":"object object ... args passed mobster::fit_mobster()","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_subclones.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","title":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","text":"Fit clonal subclonal components model residuals power-law model","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_subclones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","text":"","code":"fit_subclones(   object,   N = 1:3,   powerlaw_model_name = active_models(object),   snvs_name = default_SNVs(object),   cnvs_name = default_CNVs(object),   method = \"BMix\",   upper_f_limit = 0.75,   clip_sif = NULL,   clip_input = file.path(tempdir(), \"clip_input\"),   clip_output = file.path(tempdir(), \"clip_output\"),   verbose = get_cevomod_verbosity() )  fit_subclones_bmix(   object,   N = 1:3,   powerlaw_model_name = active_models(object),   snvs_name = default_SNVs(object),   upper_f_limit = 0.75,   verbose = get_cevomod_verbosity() )  fit_subclones_clip(   object,   powerlaw_model_name = active_models(object),   snvs_name = default_SNVs(object),   cnvs_name = default_CNVs(object),   upper_f_limit = 0.75,   clip_sif = NULL,   clip_input = file.path(tempdir(), \"clip_input\"),   clip_output = file.path(tempdir(), \"clip_output\"),   verbose = get_cevomod_verbosity() )  fit_subclones_mclust(   object,   N = 1:3,   powerlaw_model_name = active_models(object),   snvs_name = default_SNVs(object),   upper_f_limit = 0.75,   verbose = get_cevomod_verbosity() )"},{"path":"https://pawelqs.github.io/cevomod/reference/fit_subclones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","text":"object cevodata object N Vector numbers clones models powerlaw_model_name Residual powerlaw model use? powerlaw_fixed/powerlaw_optim snvs_name snvs use? cnvs_name cnvs use? method Clustering method use. Currently supported methods: mclust - fastest method, approximately 3-4 times faster BMix, uses gaussian mixture modelling BMix - accurate, considers subclones binomial clusters, slightly slower CliP - Clonal structure identification penalizing pairwise differences upper_f_limit ignore variants f higher clip_sif Apptainer image file CliP. NULL, cevomod seeks CliP.sif file containers_dir (set ) current working directory. container build build_clip_container(). clip_input Path store CliP input files clip_output Path store CliP output files verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_subclones.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","text":"fit_subclones(): Provides common interface methods, runs selected method passes required arguments . fit_subclones_bmix(): Fit subclonal distributions neutral model residuals using BMix fit_subclones_clip(): Fit subclonal distributions neutral model residuals using CliP - Clonal structure identification penalizing pairwise differences (github). Requires Apptainer installed path CliP.sif container image provided, CliP.sif exists containers_dir (set_containers_dir()) CliP.sif exists current working directory. container build build_clip_container(). fit_subclones_mclust(): Fit subclonal distributions neutral model residuals using mclust","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fit_subclones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit clonal and subclonal components of the model to the residuals of the\npower-law model — fit_subclones","text":"","code":"if (FALSE) { # Using BMix fit_subclones(test_data_fitted) # or fit_subclones_bmix(test_data_fitted)  # Using mclust fit_subclones(test_data_fitted, method = \"mclust\") # or fit_subclones_mclust(test_data_fitted)  # Using CliP set_containers_dir(selected_dir) build_clip_container() fit_subclones(test_data_fitted, method = \"CliP\") # or fit_subclones_clip(test_data_fitted) }"},{"path":"https://pawelqs.github.io/cevomod/reference/fix_powerlaw_N_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill N_mutations column for powerlaw models — fix_powerlaw_N_mutations","title":"Fill N_mutations column for powerlaw models — fix_powerlaw_N_mutations","text":"Fill N_mutations column powerlaw models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/fix_powerlaw_N_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill N_mutations column for powerlaw models — fix_powerlaw_N_mutations","text":"","code":"fix_powerlaw_N_mutations(models, cd, models_name)"},{"path":"https://pawelqs.github.io/cevomod/reference/fix_powerlaw_N_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill N_mutations column for powerlaw models — fix_powerlaw_N_mutations","text":"models tibble get_models() cd cevodata object models_name models name","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/generate_neutral_snvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate neutral SNVs — generate_neutral_snvs","title":"Generate neutral SNVs — generate_neutral_snvs","text":"Generate neutral SNVs","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/generate_neutral_snvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate neutral SNVs — generate_neutral_snvs","text":"","code":"generate_neutral_snvs(   mut_rate = 2,   sample_below = 0.15,   resolution = 0.01,   DP = 100 )"},{"path":"https://pawelqs.github.io/cevomod/reference/generate_neutral_snvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate neutral SNVs — generate_neutral_snvs","text":"mut_rate f(x) = /x^2 formula sample_below mutations value sampled resolution resolution DP sequncing depth","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/generate_neutral_snvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate neutral SNVs — generate_neutral_snvs","text":"SNVs tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/generate_neutral_snvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate neutral SNVs — generate_neutral_snvs","text":"","code":"generate_neutral_snvs() #> # A tibble: 1,532 × 15 #>    patient_id sample_id sample chrom   pos gene_symbol ref   alt   ref_reads #>    <chr>      <chr>     <chr>  <chr> <int> <chr>       <chr> <chr>     <dbl> #>  1 S1         S1        tumor  NA       NA NA          NA    NA           98 #>  2 S1         S1        tumor  NA       NA NA          NA    NA           97 #>  3 S1         S1        tumor  NA       NA NA          NA    NA           97 #>  4 S1         S1        tumor  NA       NA NA          NA    NA           97 #>  5 S1         S1        tumor  NA       NA NA          NA    NA           96 #>  6 S1         S1        tumor  NA       NA NA          NA    NA           96 #>  7 S1         S1        tumor  NA       NA NA          NA    NA           96 #>  8 S1         S1        tumor  NA       NA NA          NA    NA           96 #>  9 S1         S1        tumor  NA       NA NA          NA    NA           96 #> 10 S1         S1        tumor  NA       NA NA          NA    NA           96 #> # ℹ 1,522 more rows #> # ℹ 6 more variables: alt_reads <dbl>, impact <chr>, VAF <dbl>, DP <dbl>, #> #   n <dbl>, mut_id <chr>"},{"path":"https://pawelqs.github.io/cevomod/reference/geom_powerlaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot power-law curve — geom_powerlaw","title":"Plot power-law curve — geom_powerlaw","text":"Plot power-law curve","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/geom_powerlaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot power-law curve — geom_powerlaw","text":"","code":"geom_powerlaw(A, alpha, mapping, ylim = 1000, color = \"#54b4FA\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/geom_powerlaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot power-law curve — geom_powerlaw","text":"alpha power mapping mapping, x required ylim max y allowed color color ... arguments passed geom_line","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_CNVs_var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of CNV variables — get_CNVs_var_names","title":"Get names of CNV variables — get_CNVs_var_names","text":"Get names CNV variables","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_CNVs_var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of CNV variables — get_CNVs_var_names","text":"","code":"get_CNVs_var_names(object, ...)  # S3 method for cevodata get_CNVs_var_names(object, which = default_CNVs(object), ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_CNVs_var_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of CNV variables — get_CNVs_var_names","text":"object object ... arguments CNV assay use","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_CNVs_var_names.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get names of CNV variables — get_CNVs_var_names","text":"get_CNVs_var_names(cevodata): Get CNV variable names cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_cevomod_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the verbosity level — get_cevomod_verbosity","title":"Get the verbosity level — get_cevomod_verbosity","text":"Get verbosity level","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_cevomod_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the verbosity level — get_cevomod_verbosity","text":"","code":"get_cevomod_verbosity()"},{"path":"https://pawelqs.github.io/cevomod/reference/get_frequency_measure_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide which mutation frequency measure to use — get_frequency_measure_name","title":"Decide which mutation frequency measure to use — get_frequency_measure_name","text":"Used intervalization mutation frequencies. Uses CCF/2 found object, VAF otherwise","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_frequency_measure_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide which mutation frequency measure to use — get_frequency_measure_name","text":"","code":"get_frequency_measure_name(object, ...)  # S3 method for cevodata get_frequency_measure_name(object, which_snvs = default_SNVs(object), ...)  # S3 method for cevo_snvs get_frequency_measure_name(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_frequency_measure_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide which mutation frequency measure to use — get_frequency_measure_name","text":"object object ... params (used now) which_snvs SNVs use?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_model_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model names — get_model_names","title":"Get model names — get_model_names","text":"Get model names","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_model_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model names — get_model_names","text":"","code":"get_model_names(object)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_model_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model names — get_model_names","text":"object object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Get models from the object — get_models","title":"Get models from the object — get_models","text":"Get models object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get models from the object — get_models","text":"","code":"get_models(object, ...)  # S3 method for cevodata get_models(object, which = active_models(object), best_only = TRUE, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get models from the object — get_models","text":"object object get models ... arguments chr models get best_only lgl return best models?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_models.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get models from the object — get_models","text":"get_models(cevodata): Get models cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_non_zero_SFS_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get range of non empty SFS bins — get_non_zero_SFS_range","title":"Get range of non empty SFS bins — get_non_zero_SFS_range","text":"Get range non empty SFS bins","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_non_zero_SFS_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get range of non empty SFS bins — get_non_zero_SFS_range","text":"","code":"get_non_zero_SFS_range(   sfs,   allowed_zero_bins = 1,   y_treshold = 1,   y_threshold_pct = 0.01 )"},{"path":"https://pawelqs.github.io/cevomod/reference/get_non_zero_SFS_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get range of non empty SFS bins — get_non_zero_SFS_range","text":"sfs SFS allowed_zero_bins number allowed empty bins interval y_treshold bins less mutations considered empty y_threshold_pct bins less mutations param times height higherst peak considered empty","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_patient_mutation_burden.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tumor mutation burden — get_patient_mutation_burden","title":"Get tumor mutation burden — get_patient_mutation_burden","text":"Get tumor mutation burden","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_patient_mutation_burden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tumor mutation burden — get_patient_mutation_burden","text":"","code":"get_patient_mutation_burden(object, snvs = default_SNVs(object))"},{"path":"https://pawelqs.github.io/cevomod/reference/get_patient_mutation_burden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tumor mutation burden — get_patient_mutation_burden","text":"object cevodata object snvs snvs slot","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model residuals — get_residuals","title":"Get model residuals — get_residuals","text":"Get model residuals","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model residuals — get_residuals","text":"","code":"get_residuals(cd, models_name = cd$active_model)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model residuals — get_residuals","text":"cd cevodata object models_name name models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_mutation_burden.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample mutation burden — get_sample_mutation_burden","title":"Get sample mutation burden — get_sample_mutation_burden","text":"Get sample mutation burden","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_mutation_burden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample mutation burden — get_sample_mutation_burden","text":"","code":"get_sample_mutation_burden(object, ...)  # S3 method for cevodata get_sample_mutation_burden(object, snvs = default_SNVs(object), ...)  # S3 method for cevo_snvs get_sample_mutation_burden(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_mutation_burden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample mutation burden — get_sample_mutation_burden","text":"object object ... arguments (currently nut used) snvs SNVs use","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_sequencing_depths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sample sequencing depths — get_sample_sequencing_depths","title":"Get sample sequencing depths — get_sample_sequencing_depths","text":"Get sample sequencing depths","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_sequencing_depths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sample sequencing depths — get_sample_sequencing_depths","text":"","code":"get_sample_sequencing_depths(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/get_sample_sequencing_depths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sample sequencing depths — get_sample_sequencing_depths","text":"object object ... args","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/grapes-not-in-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in operator — %not in%","title":"Not in operator — %not in%","text":"operator","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/grapes-not-in-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in operator — %not in%","text":"","code":"x %not in% y"},{"path":"https://pawelqs.github.io/cevomod/reference/grapes-not-in-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in operator — %not in%","text":"x left-hand side argument y right-hand side argument","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/hide_facet_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide facet labels — hide_facet_labels","title":"Hide facet labels — hide_facet_labels","text":"Hide facet labels","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/hide_facet_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide facet labels — hide_facet_labels","text":"","code":"hide_facet_labels()"},{"path":"https://pawelqs.github.io/cevomod/reference/hide_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide legend — hide_legend","title":"Hide legend — hide_legend","text":"Hide legend","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/hide_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide legend — hide_legend","text":"","code":"hide_legend()"},{"path":"https://pawelqs.github.io/cevomod/reference/identify_non_neutral_tail_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get selected mutations based on 2 sample models — identify_non_neutral_tail_mutations","title":"Get selected mutations based on 2 sample models — identify_non_neutral_tail_mutations","text":"Get selected mutations based 2 sample models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/identify_non_neutral_tail_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get selected mutations based on 2 sample models — identify_non_neutral_tail_mutations","text":"","code":"identify_non_neutral_tail_mutations(object, ...)  # S3 method for cevodata identify_non_neutral_tail_mutations(   object,   sample1 = NULL,   sample2 = NULL,   method = \"basic\",   verbose = TRUE,   ... )  # S3 method for singlepatient_cevodata identify_non_neutral_tail_mutations(   object,   sample1 = NULL,   sample2 = NULL,   method = \"basic\",   verbose = TRUE,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/identify_non_neutral_tail_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get selected mutations based on 2 sample models — identify_non_neutral_tail_mutations","text":"object object ... arguments sample1 sample1 sample2 sample2 method method verbose lgl","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/init_cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new cevomod dataset object — init_cevodata","title":"Create new cevomod dataset object — init_cevodata","text":"Create new cevomod dataset object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/init_cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new cevomod dataset object — init_cevodata","text":"","code":"init_cevodata(   name,   genome = \"unknown\",   cancer = \"unknown\",   snvs = NULL,   snvs_name = NULL,   cnvs = NULL,   cnvs_name = NULL )"},{"path":"https://pawelqs.github.io/cevomod/reference/init_cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new cevomod dataset object — init_cevodata","text":"name dataset name genome genome version cancer cancer type driver_genes tbl snvs tibble SNVs snvs_name name SNVs assay cnvs tibble CNVs cnvs_name name CNVs assay","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/init_cevodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new cevomod dataset object — init_cevodata","text":"cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/intervalize_mutation_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"Intervalize mutation frequencies subsequent analyses plots. Adds f_interval column SNV tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/intervalize_mutation_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"","code":"intervalize_mutation_frequencies(object, ...)  # S3 method for cevodata intervalize_mutation_frequencies(   object,   which_snvs = default_SNVs(object),   column = get_frequency_measure_name(object, which_snvs),   bins = NULL,   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_snvs intervalize_mutation_frequencies(   object,   column = get_frequency_measure_name(object),   bins = NULL,   verbose = get_cevomod_verbosity(),   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/intervalize_mutation_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"object object ... args which_snvs SNVs use column frequency measure column intervalize? default, uses CCF/2  found SNV tibble, VAF otherwise bins Number interval bins verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/intervalize_mutation_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intervalize the mutation frequencies — intervalize_mutation_frequencies","text":"object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_continuous_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show available palettes from paletteer — list_continuous_palettes","title":"Show available palettes from paletteer — list_continuous_palettes","text":"Show available palettes paletteer","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_continuous_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show available palettes from paletteer — list_continuous_palettes","text":"","code":"list_continuous_palettes(packages = c(\"gameofthrones\", \"harrypotter\"))"},{"path":"https://pawelqs.github.io/cevomod/reference/list_continuous_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show available palettes from paletteer — list_continuous_palettes","text":"packages list packages","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_continuous_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show available palettes from paletteer — list_continuous_palettes","text":"tbl palettes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_discrete_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show available palettes from paletteer — list_discrete_palettes","title":"Show available palettes from paletteer — list_discrete_palettes","text":"Show available palettes paletteer","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_discrete_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show available palettes from paletteer — list_discrete_palettes","text":"","code":"list_discrete_palettes(packages = c(\"PNWColors\"))"},{"path":"https://pawelqs.github.io/cevomod/reference/list_discrete_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show available palettes from paletteer — list_discrete_palettes","text":"packages list packages","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_discrete_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show available palettes from paletteer — list_discrete_palettes","text":"tbl palettes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_pnw_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show available palettes from PNWColorspackage — list_pnw_palettes","title":"Show available palettes from PNWColorspackage — list_pnw_palettes","text":"Show available palettes PNWColorspackage","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/list_pnw_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show available palettes from PNWColorspackage — list_pnw_palettes","text":"","code":"list_pnw_palettes()"},{"path":"https://pawelqs.github.io/cevomod/reference/list_pnw_palettes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show available palettes from PNWColorspackage — list_pnw_palettes","text":"palette names","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/merge.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two cevodata objects — merge.cevodata","title":"Merge two cevodata objects — merge.cevodata","text":"Merge two cevodata objects","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/merge.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two cevodata objects — merge.cevodata","text":"","code":"# S3 method for cevodata merge(x, y, name = \"Merged datasets\", verbose = TRUE, .id = NULL, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/merge.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two cevodata objects — merge.cevodata","text":"x, y data frames, objects coerced one. name Name merged object verbose Show messages? .id datasets names saved metadata column, provided ... arguments passed methods.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/mutation_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mutations in particular genes — mutation_plots","title":"Show mutations in particular genes — mutation_plots","text":"Show mutations particular genes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/mutation_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mutations in particular genes — mutation_plots","text":"","code":"plot_mutations(object, ...)  # S3 method for cevodata plot_mutations(   object,   genes = NULL,   drivers = NULL,   mark_genes = NULL,   y = \"genes\",   shape = \"impact\",   filter_fun = guess_filter_fun(shape),   ... )  # S3 method for tbl_df plot_mutations(   object,   genes = NULL,   drivers = NULL,   mark_genes = NULL,   y = \"genes\",   shape = \"impact\",   filter_fun = guess_filter_fun(shape),   ... )  layer_mutations(   object,   mapping = NULL,   genes = NULL,   drivers = NULL,   show_labels = TRUE,   color = \"black\",   size = 3,   shape = \"impact\",   filter_fun = guess_filter_fun(shape),   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/mutation_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mutations in particular genes — mutation_plots","text":"object cevodata ... arguments passed geom_point() genes list genes mutations shown drivers cancer type, mutations driver genes shown. Needs taken driver_genes mark_genes list genes mark y show y axis: \"genes\" \"samples\" shape \"impact\" \"variant_classification\"? filter_fun Function filtering mutations: variant_classification_filter() impact_filter() mapping aes() show_labels lgl use ggrepel label mutations? color color size size","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/mutation_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mutations in particular genes — mutation_plots","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/mutation_plots.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Show mutations in particular genes — mutation_plots","text":"layer_mutations(): Adds mutations SFS plots","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_Mf_1f_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"Plot M(f) ~ 1/f","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_Mf_1f_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"","code":"# S3 method for cevo_Mf_1f_tbl plot(   x,   from = 0.1,   to = 0.25,   scale = TRUE,   geom = \"point\",   mapping = NULL,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_Mf_1f_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"x tibble calc_Mf_1f() results min f plot max f plot scale scale data? geom ggplot geom use, eg. geom_line() mapping mapping ... futher passed geom_()","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_Mf_1f_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_Mf_1f_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot M(f) ~ 1/f — plot.cevo_Mf_1f_tbl","text":"","code":"data(\"test_data\")  test_data |>   calc_Mf_1f() |>   plot_Mf_1f() #> Calculating Williams's M(f) ~ 1/f statistics, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_SFS_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SFS — plot.cevo_SFS_tbl","title":"Plot SFS — plot.cevo_SFS_tbl","text":"Plot SFS","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_SFS_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SFS — plot.cevo_SFS_tbl","text":"","code":"# S3 method for cevo_SFS_tbl plot(x, mapping = NULL, alpha = 0.8, ..., geom = \"bar\")"},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_SFS_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SFS — plot.cevo_SFS_tbl","text":"x tibble calc_SFS() results mapping aes() alpha alpha ... futher passed geom_() geom geom","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_SFS_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SFS — plot.cevo_SFS_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_cumulative_tails_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"Plot cumulative tails","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_cumulative_tails_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"","code":"# S3 method for cevo_cumulative_tails_tbl plot(x, scale_y = TRUE, scales = \"loglog\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_cumulative_tails_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"x tibble calc_cumulative_tails() results scale_y logical scales loglog/semilog ... required Generic","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_cumulative_tails_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"ggplot obj","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot.cevo_cumulative_tails_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cumulative tails — plot.cevo_cumulative_tails_tbl","text":"","code":"data(\"test_data\") test_data |>   calc_cumulative_tails() |>   plot_cumulative_tails() #> Calculating cumulative tails, using VAF column"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_Mf_1f_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot M(f) ~ 1/f fits — plot_Mf_1f_fits","title":"Plot M(f) ~ 1/f fits — plot_Mf_1f_fits","text":"Plot M(f) ~ 1/f fits","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_Mf_1f_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot M(f) ~ 1/f fits — plot_Mf_1f_fits","text":"","code":"plot_Mf_1f_fits(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_Mf_1f_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot M(f) ~ 1/f fits — plot_Mf_1f_fits","text":"object cevodata object ... params","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cevodata models — plot_models","title":"Plot cevodata models — plot_models","text":"Plot cevodata models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cevodata models — plot_models","text":"","code":"plot_models(object, ...)  # S3 method for cevodata plot_models(   object,   models_name = active_models(object),   show_neutral_tail = TRUE,   show_binomial_layer = FALSE,   show_subclones = TRUE,   show_final_fit = TRUE,   params_neutral_tail = list(),   params_bootstraps = list(),   params_binomial = list(),   params_subclones = list(),   params_final_fit = list(),   nrow = NULL,   ncol = NULL,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cevodata models — plot_models","text":"object <cevodata> object ... arguments passed plot_SFS() models_name Name models plot show_neutral_tail <lgl> show_binomial_layer <lgl> show_subclones <lgl> show_final_fit <lgl> params_neutral_tail List non-default params neutral tail geom params_bootstraps List non-default params neutral tail bootstraps geom params_binomial List non-default params binomial geom params_subclones List non-default params subclones geom params_final_fit List non-default params final fit geom nrow Passed facet_wrap ncol Passed facet_wrap","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_neutral_A_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot 'a' coefficients for all fitted neutral models — plot_neutral_A_coefficients","title":"Plot 'a' coefficients for all fitted neutral models — plot_neutral_A_coefficients","text":"Plot '' coefficients fitted neutral models","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_neutral_A_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot 'a' coefficients for all fitted neutral models — plot_neutral_A_coefficients","text":"","code":"plot_neutral_A_coefficients(object, model_name = \"powerlaw_fixed\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_neutral_A_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot 'a' coefficients for all fitted neutral models — plot_neutral_A_coefficients","text":"object cevodata object model_name modelname ... parameters passed geom","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_non_neutral_mutations_2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of non neutral mutations — plot_non_neutral_mutations_2D","title":"Plot heatmap of non neutral mutations — plot_non_neutral_mutations_2D","text":"Plot heatmap non neutral mutations","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_non_neutral_mutations_2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of non neutral mutations — plot_non_neutral_mutations_2D","text":"","code":"plot_non_neutral_mutations_2D(object, ...)  # S3 method for cevodata plot_non_neutral_mutations_2D(object, colors = c(\"black\", \"white\", \"red\"), ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_non_neutral_mutations_2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of non neutral mutations — plot_non_neutral_mutations_2D","text":"object object ... arguments colors vector three colors use","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_private_shared_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot proportions of private and shared mutations — plot_private_shared_mutations","title":"Plot proportions of private and shared mutations — plot_private_shared_mutations","text":"Plot proportions private shared mutations","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_private_shared_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot proportions of private and shared mutations — plot_private_shared_mutations","text":"","code":"plot_private_shared_mutations(object, ...)  # S3 method for cevodata plot_private_shared_mutations(object, geom = geom_bar, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_private_shared_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot proportions of private and shared mutations — plot_private_shared_mutations","text":"object cevodata ... params geom change geom","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_private_shared_mutations.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plot proportions of private and shared mutations — plot_private_shared_mutations","text":"plot_private_shared_mutations(cevodata): Plot private shared mutation fractions","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model residuals — plot_residuals","title":"Plot model residuals — plot_residuals","text":"Plot model residuals","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model residuals — plot_residuals","text":"","code":"plot_sampling_rate(object, mapping = NULL, geom = geom_point, ...)  plot_residuals_powerlaw_model(   object,   models_name = active_models(object),   mapping = NULL,   geom = geom_point,   fit_clones = TRUE,   ... )  plot_residuals_full_model(object, mapping = NULL, geom = geom_point, ...)  plot_binomial_fits_vs_powerlaw_residuals_bars(   object,   models_name = active_models(object),   mapping = NULL,   geom = geom_bar,   fit_clones = TRUE,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model residuals — plot_residuals","text":"object cevodata object mapping mapping elements overwrite default mapping geom geom use ... parameters models_name models_name fit_clones plot clonal fits?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_residuals.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot model residuals — plot_residuals","text":"plot_sampling_rate(): Plot sampling rate plot_residuals_powerlaw_model(): Plot residuals neutral model plot_residuals_full_model(): Plot residuals full model plot_binomial_fits_vs_powerlaw_residuals_bars(): Plot binomial fits vs powerlaw residuals (barplot)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_sequencing_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sequencing depth of cevodata — plot_sequencing_depth","title":"Plot sequencing depth of cevodata — plot_sequencing_depth","text":"Plot sequencing depth cevodata","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_sequencing_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sequencing depth of cevodata — plot_sequencing_depth","text":"","code":"plot_sequencing_depth(object, ...)  # S3 method for cevodata plot_sequencing_depth(   object,   snvs_name = default_SNVs(object),   geom = geom_boxplot,   ... )  # S3 method for cevo_snvs plot_sequencing_depth(object, geom = geom_boxplot, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/plot_sequencing_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sequencing depth of cevodata — plot_sequencing_depth","text":"object cevodata cevo_snvs ... params passed geom snvs_name name SNVs table geom change geom","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/plot_sequencing_depth.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plot sequencing depth of cevodata — plot_sequencing_depth","text":"plot_sequencing_depth(cevodata): Plot sequencing data mutations cevodata plot_sequencing_depth(cevo_snvs): Plot sequencing data mutations cevodata","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting neutral models — powerlaw_fixed_model","title":"Fitting neutral models — powerlaw_fixed_model","text":"Fits power-law component model: $$y(f) = \\frac{\\mu}{\\beta n} \\frac{1}{f^2}$$ \\( \\mu/\\beta \\) mutation rate per effective cell division, n number bins spectrum. power-law exponent model equals 2, expected Williams et al. (2016) Durrett (2013). model valid assumptions exponential population growth, constant mutation rate, absence selectively advantageous micro-clones desctibed Tung Durrett (2021).","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting neutral models — powerlaw_fixed_model","text":"","code":"fit_powerlaw_tail_fixed(object, ...)  # S3 method for cevodata fit_powerlaw_tail_fixed(   object,   rsq_treshold = 0.98,   lm_length = 0.05,   name = \"powerlaw_fixed\",   pct_left = 0.05,   pct_right = 0.95,   verbose = get_cevomod_verbosity(),   ... )  layer_lm_fits(cd, model_name = \"powerlaw_fixed\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting neutral models — powerlaw_fixed_model","text":"object SNVs tibble object ... params passed geom_segment() rsq_treshold R-squared tresholds keep model neutral lm_length length linear model fits name name models' slot pct_left drop pct lowerst frequency variants improve fit pct_right drop pct highest frequency variants improve fit verbose verbose? cd cevodata model_name modelname","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting neutral models — powerlaw_fixed_model","text":"model fitted using statistic $$M(f) = \\frac{\\mu}{\\beta} \\frac{1}{f}$$ described Williams et al. (2016). Using equations described Williams et al. (2018) evolutionary parameters detected subclones can calculated.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Fitting neutral models — powerlaw_fixed_model","text":"layer_lm_fits(): Add M(f) ~ 1/f models layer M(f) ~ 1/f plot","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_fixed_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting neutral models — powerlaw_fixed_model","text":"","code":"data(\"tcga_brca_test\") snvs <- SNVs(tcga_brca_test) |>   dplyr::filter(sample_id %in% c(\"TCGA-AC-A23H-01\",\"TCGA-AN-A046-01\"))  cd <- init_cevodata(\"Test\") |>   add_SNV_data(snvs) |>   intervalize_mutation_frequencies() |>   calc_Mf_1f() |>   calc_SFS() |>   fit_powerlaw_tail_fixed(rsq_treshold = 0.99) #> Calculating f intervals, using VAF column #> Calculating Williams's M(f) ~ 1/f statistics, using VAF column #> Calculating SFS statistics #> Fitting williams neutral models...  plot(cd$models$Mf_1f, from = 0.05, to = 0.4, scale = FALSE) +   layer_lm_fits(cd)"},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting power-law tails with aptimum exponent value — powerlaw_optim","title":"Fitting power-law tails with aptimum exponent value — powerlaw_optim","text":"fit_powerlaw_tail_optim() uses stats::optim find optimal alpha whch maximizes SFS area powerlaw curve (sampled region SFS range f values maximum SFS value count) minimizes negative error - curve real SFS (sampled count). Penalty negative error depends number points negative error value. Penalty value sum error values power x, x length vector negative error values. allows powerlaw curve detach SFS 1 two bins, penalty rises extremely.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting power-law tails with aptimum exponent value — powerlaw_optim","text":"","code":"fit_powerlaw_tail_optim(object, ...)  # S3 method for cevodata fit_powerlaw_tail_optim(   object,   name = \"powerlaw_optim\",   bootstraps = FALSE,   allowed_zero_bins = 2,   y_treshold = 1,   y_threshold_pct = 0.01,   av_filter = c(1/3, 1/3, 1/3),   peak_detection_upper_limit = 0.3,   reward_upper_limit = 0.4,   control = list(maxit = 1000, ndeps = c(0.1, 0.01)),   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_SFS_bootstraps fit_powerlaw_tail_optim(   object,   name = \"powerlaw_optim\",   allowed_zero_bins = 2,   y_treshold = 1,   y_threshold_pct = 0.01,   av_filter = c(1/3, 1/3, 1/3),   peak_detection_upper_limit = 0.3,   reward_upper_limit = 0.4,   control = list(maxit = 1000, ndeps = c(0.1, 0.01)),   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_SFS_tbl fit_powerlaw_tail_optim(   object,   name = \"powerlaw_optim\",   allowed_zero_bins = 2,   y_treshold = 1,   y_threshold_pct = 0.01,   av_filter = c(1/3, 1/3, 1/3),   peak_detection_upper_limit = 0.3,   reward_upper_limit = 0.4,   control = list(maxit = 1000, ndeps = c(0.1, 0.01)),   verbose = get_cevomod_verbosity(),   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting power-law tails with aptimum exponent value — powerlaw_optim","text":"object cevodata ... arguments passed stats::optim() name name models' slot bootstraps Number bootstrap samples, FALSE make resampling. option significantly extendis model fitting time!! allowed_zero_bins number allowed empty bins interval y_treshold bins less mutations considered empty y_threshold_pct bins less mutations param times height higherst peak considered empty av_filter average filter values applied f peak_detection_upper_limit Upper f value main peak searched reward_upper_limit Mutations curve limit rewarded control control param stats::optim() verbose verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/powerlaw_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting power-law tails with aptimum exponent value — powerlaw_optim","text":"","code":"data(\"tcga_brca_test\") cd <- tcga_brca_test |>   dplyr::filter(sample_id %in% c(\"TCGA-AC-A23H-01\",\"TCGA-AN-A046-01\")) |>   fit_powerlaw_tail_optim() #> Fitting optimized power-law models... #> Models fitted in 1.19400882720947 seconds"},{"path":"https://pawelqs.github.io/cevomod/reference/prepare_SNVs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SNVs for analyses — prepare_SNVs","title":"Prepare SNVs for analyses — prepare_SNVs","text":"Prepare SNVs analyses","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/prepare_SNVs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SNVs for analyses — prepare_SNVs","text":"","code":"prepare_SNVs(object, bins = NULL, verbose = TRUE)"},{"path":"https://pawelqs.github.io/cevomod/reference/prepare_SNVs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SNVs for analyses — prepare_SNVs","text":"object cevodata obj bins number VAF interval bins verbose verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/print_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show palettes — print_palettes","title":"Show palettes — print_palettes","text":"Show palettes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/print_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show palettes — print_palettes","text":"","code":"print_palettes(packages = c(\"PNWColors\", \"nord\"), n = 10)"},{"path":"https://pawelqs.github.io/cevomod/reference/print_palettes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show palettes — print_palettes","text":"packages list packages n number colors","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/quick_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick save to ~/.cevomod directory — quick_save","title":"Quick save to ~/.cevomod directory — quick_save","text":"Quick save ~/.cevomod directory","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/quick_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick save to ~/.cevomod directory — quick_save","text":"","code":"quick_save(object)  quick_load()"},{"path":"https://pawelqs.github.io/cevomod/reference/quick_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick save to ~/.cevomod directory — quick_save","text":"object object save","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/quick_save.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Quick save to ~/.cevomod directory — quick_save","text":"quick_load(): Quick load ~/.cevomod/object.Rds","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/readthis-integration.html","id":null,"dir":"Reference","previous_headings":"","what":"readthis integration — readthis-integration","title":"readthis integration — readthis-integration","text":"readthis package may used easily read data popular mutation callers R environment. readthis functions can supplied single file paths, also lists files even paths directories files loaded (cevodata object store data many samples!) readthis functions return tibbles list tibbles. tibbles/ objects usually instances cevo_<software_name> S3 classes. cevomod implements methods allow add types data cevodata objects conveniently.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/readthis-integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readthis integration — readthis-integration","text":"","code":"add_data(cd, data, ...)  add_to_cevodata(data, cd, name, verbose, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/readthis-integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readthis integration — readthis-integration","text":"cd object data Object read readthis functions ... arguments name Name data verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/readthis-integration.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"readthis integration — readthis-integration","text":"add_data(): add_data() function takes cevodata first argument, preferred method adding data R pipelines. add_to_cevodata(): add_to_cevodata() generic set methods different classes data. methods called add_data() function.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/readthis-integration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"readthis integration — readthis-integration","text":"","code":"# library(cevomod)  ascat_dir <- system.file(\"extdata\", \"ASCAT\", package = \"readthis\") ascat <- readthis::read_ascat_files(ascat_dir) cd <- init_cevodata(\"Test dataset\") |>   add_data(ascat) #> Using 'ascat_purity' as default purity measure"},{"path":"https://pawelqs.github.io/cevomod/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/rotate_x_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate x axix labels — rotate_x_labels","title":"Rotate x axix labels — rotate_x_labels","text":"Rotate x axix labels","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/rotate_x_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate x axix labels — rotate_x_labels","text":"","code":"rotate_x_labels(angle = 90, vjust = 0.5)"},{"path":"https://pawelqs.github.io/cevomod/reference/rotate_x_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate x axix labels — rotate_x_labels","text":"angle angle vjust vjust","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/run_browser.html","id":null,"dir":"Reference","previous_headings":"","what":"Run cevobrowser app — run_browser","title":"Run cevobrowser app — run_browser","text":"Run cevobrowser app","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/run_browser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run cevobrowser app — run_browser","text":"","code":"run_browser()"},{"path":"https://pawelqs.github.io/cevomod/reference/run_cevomod.html","id":null,"dir":"Reference","previous_headings":"","what":"Run cevodata pipeline — run_cevomod","title":"Run cevodata pipeline — run_cevomod","text":"Run cevodata pipeline","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/run_cevomod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run cevodata pipeline — run_cevomod","text":"","code":"run_cevomod(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/run_cevomod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run cevodata pipeline — run_cevomod","text":"object cevodata object ... args","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_color_pnw.html","id":null,"dir":"Reference","previous_headings":"","what":"Use PNWColors palette — scale_color_pnw","title":"Use PNWColors palette — scale_color_pnw","text":"Use PNWColors palette","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_color_pnw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use PNWColors palette — scale_color_pnw","text":"","code":"scale_color_pnw(palette = \"Sunset\", direction = 1, dynamic = FALSE, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/scale_color_pnw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use PNWColors palette — scale_color_pnw","text":"palette palette name direction 1/-1 dynamic TRUE/FALSE ... additional arguments pass discrete_scale","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_cevomod.html","id":null,"dir":"Reference","previous_headings":"","what":"Different color pallettes — scale_fill_cevomod","title":"Different color pallettes — scale_fill_cevomod","text":"Different color pallettes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_cevomod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Different color pallettes — scale_fill_cevomod","text":"","code":"scale_fill_cevomod(palette = \"starfleet\", ...)  scale_color_cevomod(palette = \"starfleet\", ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_cevomod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Different color pallettes — scale_fill_cevomod","text":"palette palette name ... arguments passed scale_*_manual()","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_pnw.html","id":null,"dir":"Reference","previous_headings":"","what":"Use PNWColors palette — scale_fill_pnw","title":"Use PNWColors palette — scale_fill_pnw","text":"Use PNWColors palette","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_pnw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use PNWColors palette — scale_fill_pnw","text":"","code":"scale_fill_pnw(palette = \"Sunset\", direction = 1, dynamic = FALSE, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/scale_fill_pnw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use PNWColors palette — scale_fill_pnw","text":"palette palette name direction 1/-1 dynamic TRUE/FALSE ... additional arguments pass discrete_scale","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_cancer_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Set cancer type for the object — set_cancer_type","title":"Set cancer type for the object — set_cancer_type","text":"Set cancer type object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_cancer_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set cancer type for the object — set_cancer_type","text":"","code":"set_cancer_type(object, ...)  # S3 method for cevodata set_cancer_type(object, cancer_type, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/set_cancer_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set cancer type for the object — set_cancer_type","text":"object object set cancer type ... arguments cancer_type cancer type","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_cancer_type.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Set cancer type for the object — set_cancer_type","text":"set_cancer_type(cevodata): Set cancer type cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_cevomod_verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the verbosity level — set_cevomod_verbosity","title":"Change the verbosity level — set_cevomod_verbosity","text":"Change verbosity level","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_cevomod_verbosity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the verbosity level — set_cevomod_verbosity","text":"","code":"set_cevomod_verbosity(verbosity_level = 1)"},{"path":"https://pawelqs.github.io/cevomod/reference/set_cevomod_verbosity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the verbosity level — set_cevomod_verbosity","text":"verbosity_level Verbosity level use: 0 - silent 1 - normal 2 - detailed (cases)","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_containers_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set the containers directory — set_containers_dir","title":"Get/Set the containers directory — set_containers_dir","text":"Get/Set containers directory","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/set_containers_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set the containers directory — set_containers_dir","text":"","code":"set_containers_dir(dir)  get_containers_dir()"},{"path":"https://pawelqs.github.io/cevomod/reference/set_containers_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set the containers directory — set_containers_dir","text":"dir Path containers","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/sfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Site Frequency Spectra — sfs","title":"Site Frequency Spectra — sfs","text":"Site Frequency Spectra (Variant Allele Frequency Spectra) main statistic used cevomod.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/sfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site Frequency Spectra — sfs","text":"","code":"calc_SFS(object, ...)  # S3 method for cevodata calc_SFS(   object,   which_snvs = default_SNVs(object),   column = get_frequency_measure_name(object, which_snvs),   bins = NULL,   verbose = get_cevomod_verbosity(),   ... )  # S3 method for cevo_snvs calc_SFS(   object,   column = get_frequency_measure_name(object),   bins = NULL,   verbose = get_cevomod_verbosity(),   ... )  plot_SFS(object, ...)  # S3 method for cevodata plot_SFS(object, mapping = NULL, ..., geom = \"bar\")  get_SFS(object, model_name = \"SFS\", verbose = TRUE, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/sfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Site Frequency Spectra — sfs","text":"object SNVs tibble object ... arguments which_snvs SNVs use? column VAF CCF/2 bins Resolution cumulative tails calculation verbose verbose? mapping aes() geom Geom model_name name slot SFS statistics","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/sfs.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Site Frequency Spectra — sfs","text":"calc_SFS(): Calculates spectra samples saves saves cevodata$models$SFS tibble. SFS columns description: y number mutations frequency interval y_scaled y values scaled range 0-1 calc_SFS(cevodata): method cevodata object calc_SFS(cevo_snvs): method cevo_snvs object plot_SFS(): Plot SFS plot_SFS(cevodata): Plot SFS get_SFS(): Get SFS","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/sfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site Frequency Spectra — sfs","text":"","code":"data(\"test_data\")  test_data |>   calc_SFS() |>   plot_SFS() +   layer_mutations(test_data, mapping = ggplot2::aes(x = VAF), drivers = \"BRCA\") #> Calculating SFS statistics #> Calculating f intervals, using VAF column #> Warning: Ignoring unknown aesthetics: width #> Warning: Ignoring unknown aesthetics: shape"},{"path":"https://pawelqs.github.io/cevomod/reference/shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle order of elements in object — shuffle","title":"Shuffle order of elements in object — shuffle","text":"Shuffle order elements object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle order of elements in object — shuffle","text":"","code":"shuffle(object, ...)  # S3 method for tbl_df shuffle(object, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle order of elements in object — shuffle","text":"object object shuffle ... arguments","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/shuffle.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Shuffle order of elements in object — shuffle","text":"shuffle(tbl_df): Shuffle order rows tibble","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle order of elements in object — shuffle","text":"","code":"tibble::tibble(i = 1:10) |>   shuffle() #> # A tibble: 10 × 1 #>        i #>    <int> #>  1     5 #>  2     4 #>  3     9 #>  4     8 #>  5     3 #>  6    10 #>  7     6 #>  8     1 #>  9     2 #> 10     7"},{"path":"https://pawelqs.github.io/cevomod/reference/split_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Split object — split_by","title":"Split object — split_by","text":"Split object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/split_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split object — split_by","text":"","code":"split_by(object, ...)  # S3 method for cevodata split_by(object, x, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/split_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split object — split_by","text":"object cevodata object ... arguments x name column metadata","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/split_by.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Split object — split_by","text":"split_by(cevodata): Split cevodata object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cumulative Tail — stat_cumulative_tail","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"Nice extention default ggplot2 stats. However, easier use plot_cumulative_tails() function.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"","code":"stat_cumulative_tail(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   bins = 100,   ... )"},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geom position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). bins number bins ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"stat_bin() suitable continuous x data. x data discrete, probably want use stat_count(). default, underlying computation (stat_bin()) uses 30 bins; good default, idea get experimenting different number bins. can also experiment modifying binwidth center boundary arguments. binwidth overrides bins one change time. may need look options uncover full story behind data. addition geom_histogram(), can create histogram plot using scale_x_binned() geom_bar(). method default plots tick marks bar.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"orientation","dir":"Reference","previous_headings":"","what":"Orientation","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"geom treats axis differently , thus, can thus two orientations. Often orientation easy deduce combination given mappings types positional scales use. Thus, ggplot2 default try guess orientation layer . rare circumstances, orientation ambiguous guessing may fail. case orientation can specified directly using orientation parameter, can either \"x\" \"y\". value gives axis geom run along, \"x\" default orientation expect geom.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"geom_histogram() uses aesthetics geom_bar(); geom_freqpoly() uses aesthetics geom_line().","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"calculated 'stat' part layers can accessed delayed evaluation. after_stat(count) number points bin. after_stat(density) density points bin, scaled integrate 1. after_stat(ncount) count, scaled maximum 1. after_stat(ndensity) density, scaled maximum 1. after_stat(width) widths bins.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"dropped-variables","dir":"Reference","previous_headings":"","what":"Dropped variables","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"weight binning, weights individual data points (supplied) longer available.","code":""},{"path":[]},{"path":"https://pawelqs.github.io/cevomod/reference/stat_cumulative_tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cumulative Tail — stat_cumulative_tail","text":"","code":"library(ggplot2) data(\"tcga_brca_test\") snvs <- SNVs(tcga_brca_test)  ggplot(snvs, aes(VAF, color = sample_id)) +  stat_cumulative_tail()   ggplot(snvs, aes(VAF, y = stat(y), color = sample_id)) +  stat_cumulative_tail() #> Warning: `stat(y)` was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(y)` instead."},{"path":"https://pawelqs.github.io/cevomod/reference/tcga_brca_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Small TCGA BRCA cevodata dataset — tcga_brca_test","title":"Small TCGA BRCA cevodata dataset — tcga_brca_test","text":"Small TCGA BRCA cevodata dataset","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"4 test samples — test_data","title":"4 test samples — test_data","text":"4 test samples","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/test_data_fitted.html","id":null,"dir":"Reference","previous_headings":"","what":"cevomod results for 4 test samples — test_data_fitted","title":"cevomod results for 4 test samples — test_data_fitted","text":"cevomod results 4 test samples","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/theme_ellie.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme Ellie — theme_ellie","title":"Theme Ellie — theme_ellie","text":"Theme Ellie","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/theme_ellie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme Ellie — theme_ellie","text":"","code":"theme_ellie(n = 6)"},{"path":"https://pawelqs.github.io/cevomod/reference/theme_ellie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme Ellie — theme_ellie","text":"n number colors","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/to_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Export cevodata to CliP input — to_clip","title":"Export cevodata to CliP input — to_clip","text":"CliP algorithm clonal structure identification penalizing pairwise differences Wenyi Wang Lab MD Anderson Cancer Center Houston.","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/to_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export cevodata to CliP input — to_clip","text":"","code":"to_clip(   cd,   out_dir = NULL,   snvs_name = default_SNVs(cd),   cnvs_name = default_CNVs(cd),   purity_column = \"purity\",   keep_chromosomes = str_c(\"chr\", 1:22) )"},{"path":"https://pawelqs.github.io/cevomod/reference/to_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export cevodata to CliP input — to_clip","text":"cd cevodata object out_dir Directory save files. List items returned out_dir NULL snvs_name name snvs use cnvs_name name cnvs use purity_column name metadata column purity estimates used keep_chromosomes list non-sex chromosomes. CliP use sex chromosomes","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/unite_mutation_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite many columns to create mutation_id column — unite_mutation_id","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"Unite many columns create mutation_id column","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/unite_mutation_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"","code":"unite_mutation_id(snvs, sep = \"-\", remove = TRUE)"},{"path":"https://pawelqs.github.io/cevomod/reference/unite_mutation_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite many columns to create mutation_id column — unite_mutation_id","text":"snvs SNVs sep Separator remove Remove united columns?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/update.cevodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update cevodata object with values from another object — update.cevodata","title":"Update cevodata object with values from another object — update.cevodata","text":"Update cevodata object values another object","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/update.cevodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update cevodata object with values from another object — update.cevodata","text":"","code":"# S3 method for cevodata update(object, object2, ...)"},{"path":"https://pawelqs.github.io/cevomod/reference/update.cevodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update cevodata object with values from another object — update.cevodata","text":"object object update object2 object use ... args, unused now","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/use_purity.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose purity measure — use_purity","title":"Choose purity measure — use_purity","text":"metadata can contain purity measures columns 'purity'. T function can used set 'purity' values using values requested column","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/use_purity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose purity measure — use_purity","text":"","code":"use_purity(cd, name, verbose = get_cevomod_verbosity())"},{"path":"https://pawelqs.github.io/cevomod/reference/use_purity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose purity measure — use_purity","text":"cd object name Name metadata column chosen purity values verbose Verbose?","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Variant Classification — variant_classification","title":"Custom Variant Classification — variant_classification","text":"Custom Variant Classification","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter mutations by variant_classification field — variant_classification_filter","title":"Filter mutations by variant_classification field — variant_classification_filter","text":"Filter mutations variant_classification field","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter mutations by variant_classification field — variant_classification_filter","text":"","code":"variant_classification_filter(keep = c(\"nonsilent\", \"null\"))  impact_filter(keep = c(\"HIGH\", \"MODERATE\"))"},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter mutations by variant_classification field — variant_classification_filter","text":"keep values keep","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter mutations by variant_classification field — variant_classification_filter","text":"filtering function","code":""},{"path":"https://pawelqs.github.io/cevomod/reference/variant_classification_filter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Filter mutations by variant_classification field — variant_classification_filter","text":"impact_filter(): Filter mutations impact field","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-230","dir":"Changelog","previous_headings":"","what":"cevomod 2.3.0","title":"cevomod 2.3.0","text":"subclones can fitted using CliP (Jiang et al., 2021) (fit_subclones(method = \"CliP\")). option requires Apptainer installed. CliP container image can build build_clip_container()","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-220","dir":"Changelog","previous_headings":"","what":"cevomod 2.2.0","title":"cevomod 2.2.0","text":"fit_powerlaw_tail_fixed() bootstrap option","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-210","dir":"Changelog","previous_headings":"","what":"cevomod 2.1.0","title":"cevomod 2.1.0","text":"cevomod integrated helper readthis package, designed bulk reading variant files algorithms Mutect2, Strelka, ASCAT, FACETS, cevomod-friendly data format. Objects returned readthis::read_*() functions can added cevodata object using general add_data() function.","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-200","dir":"Changelog","previous_headings":"","what":"cevomod 2.0.0","title":"cevomod 2.0.0","text":"cevomod functions can utilize VAF CCF (Cancer Cell Fraction) measure mutation frequency. CCF calculated using formula introduced Dentro et al. Principles Reconstructing Subclonal Architecture Cancers (2015)","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-110","dir":"Changelog","previous_headings":"","what":"cevomod 1.1.0","title":"cevomod 1.1.0","text":"cevodata export CliP implemented","code":""},{"path":"https://pawelqs.github.io/cevomod/news/index.html","id":"cevomod-100","dir":"Changelog","previous_headings":"","what":"cevomod 1.0.0","title":"cevomod 1.0.0","text":"cevodata class implementation fitting power-law tails exponent equal 2 using M(f) ∼ 1/f statistic fitting power-law tails optimized exponent fitting subclones using mclust fitting subclones using BMix calculation evolutionary parameters using Williams et al. (2018) equations MOBSTER code (Caravagna et al. (2020))","code":""}]
